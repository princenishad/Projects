{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":4158721,"sourceType":"datasetVersion","datasetId":2455017},{"sourceId":4332961,"sourceType":"datasetVersion","datasetId":2551490},{"sourceId":4332964,"sourceType":"datasetVersion","datasetId":2551492},{"sourceId":4332968,"sourceType":"datasetVersion","datasetId":2551495},{"sourceId":4332973,"sourceType":"datasetVersion","datasetId":2551498},{"sourceId":4335443,"sourceType":"datasetVersion","datasetId":2552740},{"sourceId":4413219,"sourceType":"datasetVersion","datasetId":2585692}],"dockerImageVersionId":30262,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2022-10-28T10:07:46.087239Z","iopub.execute_input":"2022-10-28T10:07:46.087685Z","iopub.status.idle":"2022-10-28T10:07:46.142019Z","shell.execute_reply.started":"2022-10-28T10:07:46.087595Z","shell.execute_reply":"2022-10-28T10:07:46.140940Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/processed-train-dataset/final_train_dataset.csv\n/kaggle/input/train-labels/train_labels.csv\n/kaggle/input/metadata/metadata.csv\n/kaggle/input/processed-test-dataset/final_test_dataset.csv\n/kaggle/input/submission-format-mars-spectrometry/submission_format.csv\n/kaggle/input/validation-labels/val_labels.csv\n/kaggle/input/supplemental-data/supplemental_metadata.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Laying down the fundamental structure to proceed !** \n\n* step 1 : Adding val_features that is train[809:] to testing set keeping the labels unchanged same.\n* step 2 : Using XGboost ","metadata":{}},{"cell_type":"code","source":"suppl_metadata = pd.read_csv(\"/kaggle/input/supplemental-data/supplemental_metadata.csv\")","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:08:21.670727Z","iopub.execute_input":"2022-10-28T10:08:21.671229Z","iopub.status.idle":"2022-10-28T10:08:21.701281Z","shell.execute_reply.started":"2022-10-28T10:08:21.671190Z","shell.execute_reply":"2022-10-28T10:08:21.700276Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"suppl_metadata.info()","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:08:34.261631Z","iopub.execute_input":"2022-10-28T10:08:34.262006Z","iopub.status.idle":"2022-10-28T10:08:34.289263Z","shell.execute_reply.started":"2022-10-28T10:08:34.261973Z","shell.execute_reply":"2022-10-28T10:08:34.288295Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1841 entries, 0 to 1840\nData columns (total 18 columns):\n #   Column              Non-Null Count  Dtype  \n---  ------              --------------  -----  \n 0   sample_id           1841 non-null   object \n 1   split               1841 non-null   object \n 2   mars1_ega_split     1841 non-null   object \n 3   instrument_type     1841 non-null   object \n 4   basalt              1494 non-null   float64\n 5   carbonate           1494 non-null   float64\n 6   chloride            1494 non-null   float64\n 7   iron_oxide          1494 non-null   float64\n 8   oxalate             1494 non-null   float64\n 9   oxychlorine         1494 non-null   float64\n 10  phyllosilicate      1494 non-null   float64\n 11  silicate            1494 non-null   float64\n 12  sulfate             1494 non-null   float64\n 13  sulfide             1494 non-null   float64\n 14  carrier_gas         1841 non-null   object \n 15  different_pressure  1841 non-null   int64  \n 16  features_path       1841 non-null   object \n 17  features_md5_hash   1841 non-null   object \ndtypes: float64(10), int64(1), object(7)\nmemory usage: 259.0+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"suppl_metadata[1490:1583]","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:18:37.372779Z","iopub.execute_input":"2022-10-28T10:18:37.373154Z","iopub.status.idle":"2022-10-28T10:18:37.406302Z","shell.execute_reply.started":"2022-10-28T10:18:37.373124Z","shell.execute_reply":"2022-10-28T10:18:37.405258Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"      sample_id         split mars1_ega_split instrument_type  basalt  \\\n1490  EGA-S1502  supplemental            test      commercial     0.0   \n1491  EGA-S1503  supplemental            test      commercial     0.0   \n1492  EGA-S1504  supplemental            test      commercial     0.0   \n1493  EGA-S1505  supplemental            test      commercial     0.0   \n1494  EGA-X0000  supplemental    supplemental      commercial     NaN   \n...         ...           ...             ...             ...     ...   \n1578  EGA-X0084  supplemental    supplemental      commercial     NaN   \n1579  EGA-X0085  supplemental    supplemental      commercial     NaN   \n1580  EGA-X0086  supplemental    supplemental      commercial     NaN   \n1581  EGA-X0087  supplemental    supplemental      commercial     NaN   \n1582  EGA-X0088  supplemental    supplemental      commercial     NaN   \n\n      carbonate  chloride  iron_oxide  oxalate  oxychlorine  phyllosilicate  \\\n1490        0.0       0.0         0.0      0.0          0.0             1.0   \n1491        0.0       0.0         0.0      0.0          1.0             0.0   \n1492        0.0       0.0         0.0      0.0          0.0             0.0   \n1493        0.0       1.0         0.0      0.0          0.0             0.0   \n1494        NaN       NaN         NaN      NaN          NaN             NaN   \n...         ...       ...         ...      ...          ...             ...   \n1578        NaN       NaN         NaN      NaN          NaN             NaN   \n1579        NaN       NaN         NaN      NaN          NaN             NaN   \n1580        NaN       NaN         NaN      NaN          NaN             NaN   \n1581        NaN       NaN         NaN      NaN          NaN             NaN   \n1582        NaN       NaN         NaN      NaN          NaN             NaN   \n\n      silicate  sulfate  sulfide carrier_gas  different_pressure  \\\n1490       0.0      0.0      0.0          he                   0   \n1491       0.0      0.0      0.0          he                   0   \n1492       0.0      0.0      0.0          he                   0   \n1493       0.0      0.0      0.0          he                   0   \n1494       NaN      NaN      NaN          he                   0   \n...        ...      ...      ...         ...                 ...   \n1578       NaN      NaN      NaN          he                   0   \n1579       NaN      NaN      NaN          he                   0   \n1580       NaN      NaN      NaN          he                   0   \n1581       NaN      NaN      NaN          he                   0   \n1582       NaN      NaN      NaN          he                   0   \n\n                            features_path                 features_md5_hash  \n1490  supplemental_features/EGA-S1502.csv  59402e65b5689766fbc18943c6c0a881  \n1491  supplemental_features/EGA-S1503.csv  dd42287ddc74a8639495fa035ecc59a0  \n1492  supplemental_features/EGA-S1504.csv  3030319eb6c5ed1cc6c15f8210991572  \n1493  supplemental_features/EGA-S1505.csv  9edd10d43e50be65d21705d343b6e965  \n1494  supplemental_features/EGA-X0000.csv  415d9be2aaa9151551ec2ce94aac3236  \n...                                   ...                               ...  \n1578  supplemental_features/EGA-X0084.csv  7990533f570f87834e3ed25fb4e0ec57  \n1579  supplemental_features/EGA-X0085.csv  50d55aee3a0d9c267820e4292c1568d4  \n1580  supplemental_features/EGA-X0086.csv  303f8cfd28874f341c1469bf7806fcd9  \n1581  supplemental_features/EGA-X0087.csv  00d816808f5b1d966217f080e8812439  \n1582  supplemental_features/EGA-X0088.csv  18e637cec9dba68ca308c080331d7aaf  \n\n[93 rows x 18 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sample_id</th>\n      <th>split</th>\n      <th>mars1_ega_split</th>\n      <th>instrument_type</th>\n      <th>basalt</th>\n      <th>carbonate</th>\n      <th>chloride</th>\n      <th>iron_oxide</th>\n      <th>oxalate</th>\n      <th>oxychlorine</th>\n      <th>phyllosilicate</th>\n      <th>silicate</th>\n      <th>sulfate</th>\n      <th>sulfide</th>\n      <th>carrier_gas</th>\n      <th>different_pressure</th>\n      <th>features_path</th>\n      <th>features_md5_hash</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1490</th>\n      <td>EGA-S1502</td>\n      <td>supplemental</td>\n      <td>test</td>\n      <td>commercial</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>he</td>\n      <td>0</td>\n      <td>supplemental_features/EGA-S1502.csv</td>\n      <td>59402e65b5689766fbc18943c6c0a881</td>\n    </tr>\n    <tr>\n      <th>1491</th>\n      <td>EGA-S1503</td>\n      <td>supplemental</td>\n      <td>test</td>\n      <td>commercial</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>he</td>\n      <td>0</td>\n      <td>supplemental_features/EGA-S1503.csv</td>\n      <td>dd42287ddc74a8639495fa035ecc59a0</td>\n    </tr>\n    <tr>\n      <th>1492</th>\n      <td>EGA-S1504</td>\n      <td>supplemental</td>\n      <td>test</td>\n      <td>commercial</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>he</td>\n      <td>0</td>\n      <td>supplemental_features/EGA-S1504.csv</td>\n      <td>3030319eb6c5ed1cc6c15f8210991572</td>\n    </tr>\n    <tr>\n      <th>1493</th>\n      <td>EGA-S1505</td>\n      <td>supplemental</td>\n      <td>test</td>\n      <td>commercial</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>he</td>\n      <td>0</td>\n      <td>supplemental_features/EGA-S1505.csv</td>\n      <td>9edd10d43e50be65d21705d343b6e965</td>\n    </tr>\n    <tr>\n      <th>1494</th>\n      <td>EGA-X0000</td>\n      <td>supplemental</td>\n      <td>supplemental</td>\n      <td>commercial</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>he</td>\n      <td>0</td>\n      <td>supplemental_features/EGA-X0000.csv</td>\n      <td>415d9be2aaa9151551ec2ce94aac3236</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1578</th>\n      <td>EGA-X0084</td>\n      <td>supplemental</td>\n      <td>supplemental</td>\n      <td>commercial</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>he</td>\n      <td>0</td>\n      <td>supplemental_features/EGA-X0084.csv</td>\n      <td>7990533f570f87834e3ed25fb4e0ec57</td>\n    </tr>\n    <tr>\n      <th>1579</th>\n      <td>EGA-X0085</td>\n      <td>supplemental</td>\n      <td>supplemental</td>\n      <td>commercial</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>he</td>\n      <td>0</td>\n      <td>supplemental_features/EGA-X0085.csv</td>\n      <td>50d55aee3a0d9c267820e4292c1568d4</td>\n    </tr>\n    <tr>\n      <th>1580</th>\n      <td>EGA-X0086</td>\n      <td>supplemental</td>\n      <td>supplemental</td>\n      <td>commercial</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>he</td>\n      <td>0</td>\n      <td>supplemental_features/EGA-X0086.csv</td>\n      <td>303f8cfd28874f341c1469bf7806fcd9</td>\n    </tr>\n    <tr>\n      <th>1581</th>\n      <td>EGA-X0087</td>\n      <td>supplemental</td>\n      <td>supplemental</td>\n      <td>commercial</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>he</td>\n      <td>0</td>\n      <td>supplemental_features/EGA-X0087.csv</td>\n      <td>00d816808f5b1d966217f080e8812439</td>\n    </tr>\n    <tr>\n      <th>1582</th>\n      <td>EGA-X0088</td>\n      <td>supplemental</td>\n      <td>supplemental</td>\n      <td>commercial</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>he</td>\n      <td>0</td>\n      <td>supplemental_features/EGA-X0088.csv</td>\n      <td>18e637cec9dba68ca308c080331d7aaf</td>\n    </tr>\n  </tbody>\n</table>\n<p>93 rows × 18 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"features = pd.read_csv(\"/kaggle/input/processed-train-dataset/final_train_dataset.csv\")\nlabels = pd.read_csv(\"/kaggle/input/train-labels/train_labels.csv\")\nmetadata = pd.read_csv(\"/kaggle/input/metadata/metadata.csv\")\nval_labels = pd.read_csv(\"/kaggle/input/validation-labels/val_labels.csv\")\ntest = pd.read_csv(\"/kaggle/input/processed-test-dataset/final_test_dataset.csv\")","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:25:40.439685Z","iopub.execute_input":"2022-10-28T10:25:40.440281Z","iopub.status.idle":"2022-10-28T10:25:40.466350Z","shell.execute_reply.started":"2022-10-28T10:25:40.440244Z","shell.execute_reply":"2022-10-28T10:25:40.465457Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"## concating val features with testing dataset\nfinal_test = pd.concat([features[809:], test])","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:25:41.351486Z","iopub.execute_input":"2022-10-28T10:25:41.351937Z","iopub.status.idle":"2022-10-28T10:25:41.358238Z","shell.execute_reply.started":"2022-10-28T10:25:41.351891Z","shell.execute_reply":"2022-10-28T10:25:41.357172Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"## concating val set labels with our train set labels\nfinal_labels = pd.concat([labels,val_labels])","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:25:41.649579Z","iopub.execute_input":"2022-10-28T10:25:41.650266Z","iopub.status.idle":"2022-10-28T10:25:41.657525Z","shell.execute_reply.started":"2022-10-28T10:25:41.650229Z","shell.execute_reply":"2022-10-28T10:25:41.656486Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"final_labels.drop(['sample_id'], axis=1, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:25:41.997104Z","iopub.execute_input":"2022-10-28T10:25:41.997781Z","iopub.status.idle":"2022-10-28T10:25:42.003551Z","shell.execute_reply.started":"2022-10-28T10:25:41.997744Z","shell.execute_reply":"2022-10-28T10:25:42.002404Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"## adding metadata \"derivatized\" binary column to our features dataset\nmetadata.info()","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:25:42.270170Z","iopub.execute_input":"2022-10-28T10:25:42.271037Z","iopub.status.idle":"2022-10-28T10:25:42.285096Z","shell.execute_reply.started":"2022-10-28T10:25:42.271001Z","shell.execute_reply":"2022-10-28T10:25:42.284076Z"},"trusted":true},"execution_count":34,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1584 entries, 0 to 1583\nData columns (total 5 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   sample_id          1584 non-null   object \n 1   split              1584 non-null   object \n 2   derivatized        561 non-null    float64\n 3   features_path      1584 non-null   object \n 4   features_md5_hash  1584 non-null   object \ndtypes: float64(1), object(4)\nmemory usage: 62.0+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"## now here is the problem for derivatized we only have 561 data points out of 1584 that is one third.","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:25:42.576156Z","iopub.execute_input":"2022-10-28T10:25:42.576516Z","iopub.status.idle":"2022-10-28T10:25:42.581015Z","shell.execute_reply.started":"2022-10-28T10:25:42.576486Z","shell.execute_reply":"2022-10-28T10:25:42.579830Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"## so now our for features we will consider first 1120 values of derivatized and for testing we will have derivatized from [809:]\nfeatures['derivatized'] = metadata['derivatized'][0:1120]\nfinal_test['derivatized'] = metadata['derivatized'][809:]","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:25:42.883954Z","iopub.execute_input":"2022-10-28T10:25:42.884619Z","iopub.status.idle":"2022-10-28T10:25:42.892484Z","shell.execute_reply.started":"2022-10-28T10:25:42.884575Z","shell.execute_reply":"2022-10-28T10:25:42.891305Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"final_test['derivatized'] = final_test['derivatized'].fillna(value=0.0)","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:25:43.026387Z","iopub.execute_input":"2022-10-28T10:25:43.026752Z","iopub.status.idle":"2022-10-28T10:25:43.033973Z","shell.execute_reply.started":"2022-10-28T10:25:43.026722Z","shell.execute_reply":"2022-10-28T10:25:43.032828Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"features['derivatized'] = features['derivatized'].fillna(value=0.0)\nfeatures.tail()","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:25:43.321479Z","iopub.execute_input":"2022-10-28T10:25:43.322549Z","iopub.status.idle":"2022-10-28T10:25:43.336762Z","shell.execute_reply.started":"2022-10-28T10:25:43.322499Z","shell.execute_reply":"2022-10-28T10:25:43.335717Z"},"trusted":true},"execution_count":38,"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"      Unnamed: 0       time        mass     intensity  derivatized\n1116        1116   2.834383   74.970963  1.285254e+09          1.0\n1117        1117   7.308333  146.799255  1.884232e+09          0.0\n1118        1118   6.298967  221.081085  1.225335e+07          0.0\n1119        1119   4.182017  133.996460  8.446767e+08          1.0\n1120        1120  16.560683  221.229858  8.818310e+07          0.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>time</th>\n      <th>mass</th>\n      <th>intensity</th>\n      <th>derivatized</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1116</th>\n      <td>1116</td>\n      <td>2.834383</td>\n      <td>74.970963</td>\n      <td>1.285254e+09</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1117</th>\n      <td>1117</td>\n      <td>7.308333</td>\n      <td>146.799255</td>\n      <td>1.884232e+09</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1118</th>\n      <td>1118</td>\n      <td>6.298967</td>\n      <td>221.081085</td>\n      <td>1.225335e+07</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1119</th>\n      <td>1119</td>\n      <td>4.182017</td>\n      <td>133.996460</td>\n      <td>8.446767e+08</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1120</th>\n      <td>1120</td>\n      <td>16.560683</td>\n      <td>221.229858</td>\n      <td>8.818310e+07</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"features.drop(['Unnamed: 0'], axis=1, inplace=True)\nfinal_test.drop(['Unnamed: 0'], axis=1, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:25:43.497668Z","iopub.execute_input":"2022-10-28T10:25:43.498440Z","iopub.status.idle":"2022-10-28T10:25:43.506999Z","shell.execute_reply.started":"2022-10-28T10:25:43.498401Z","shell.execute_reply":"2022-10-28T10:25:43.505857Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"features.tail()","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:25:46.163349Z","iopub.execute_input":"2022-10-28T10:25:46.163707Z","iopub.status.idle":"2022-10-28T10:25:46.175790Z","shell.execute_reply.started":"2022-10-28T10:25:46.163677Z","shell.execute_reply":"2022-10-28T10:25:46.174742Z"},"trusted":true},"execution_count":40,"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"           time        mass     intensity  derivatized\n1116   2.834383   74.970963  1.285254e+09          1.0\n1117   7.308333  146.799255  1.884232e+09          0.0\n1118   6.298967  221.081085  1.225335e+07          0.0\n1119   4.182017  133.996460  8.446767e+08          1.0\n1120  16.560683  221.229858  8.818310e+07          0.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>time</th>\n      <th>mass</th>\n      <th>intensity</th>\n      <th>derivatized</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1116</th>\n      <td>2.834383</td>\n      <td>74.970963</td>\n      <td>1.285254e+09</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1117</th>\n      <td>7.308333</td>\n      <td>146.799255</td>\n      <td>1.884232e+09</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1118</th>\n      <td>6.298967</td>\n      <td>221.081085</td>\n      <td>1.225335e+07</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1119</th>\n      <td>4.182017</td>\n      <td>133.996460</td>\n      <td>8.446767e+08</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1120</th>\n      <td>16.560683</td>\n      <td>221.229858</td>\n      <td>8.818310e+07</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"final_test['mass'] = np.log10(final_test['mass'])\nfinal_test['intensity'] = np.log10(final_test['intensity'])\nfinal_test['time'] = np.log10(final_test['time'])\nfeatures['mass'] = np.log10(features['mass'])\nfeatures['intensity'] = np.log10(features['intensity'])\nfeatures['time'] = np.log10(features['time'])","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:25:54.864784Z","iopub.execute_input":"2022-10-28T10:25:54.865182Z","iopub.status.idle":"2022-10-28T10:25:54.875333Z","shell.execute_reply.started":"2022-10-28T10:25:54.865150Z","shell.execute_reply":"2022-10-28T10:25:54.874226Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"labels.drop(['sample_id'], axis=1, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:25:56.021372Z","iopub.execute_input":"2022-10-28T10:25:56.022001Z","iopub.status.idle":"2022-10-28T10:25:56.028916Z","shell.execute_reply.started":"2022-10-28T10:25:56.021955Z","shell.execute_reply":"2022-10-28T10:25:56.027861Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"code","source":"## this step is optional i am just trying to remove time, i included it only because i thought it might be a proxy for temprature\n#features.drop(['time'], axis=1, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:25:56.833382Z","iopub.execute_input":"2022-10-28T10:25:56.834078Z","iopub.status.idle":"2022-10-28T10:25:56.839449Z","shell.execute_reply.started":"2022-10-28T10:25:56.834018Z","shell.execute_reply":"2022-10-28T10:25:56.838274Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"final_labels.shape[0]","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:25:57.983909Z","iopub.execute_input":"2022-10-28T10:25:57.984268Z","iopub.status.idle":"2022-10-28T10:25:57.990340Z","shell.execute_reply.started":"2022-10-28T10:25:57.984238Z","shell.execute_reply":"2022-10-28T10:25:57.989362Z"},"trusted":true},"execution_count":44,"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"1121"},"metadata":{}}]},{"cell_type":"code","source":"for label in final_labels.columns:\n    zero_values = len(final_labels[final_labels[f'{label}']== 0])\n    one_values = len(final_labels[final_labels[f'{label}'] == 1])\n    print(f\"{label} zero values is {zero_values} and one value is {one_values}\")\n    print(f\"{label} ratio is {np.round((zero_values/one_values),2)}\")","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:25:58.999488Z","iopub.execute_input":"2022-10-28T10:25:58.999872Z","iopub.status.idle":"2022-10-28T10:25:59.016484Z","shell.execute_reply.started":"2022-10-28T10:25:58.999837Z","shell.execute_reply":"2022-10-28T10:25:59.015395Z"},"trusted":true},"execution_count":45,"outputs":[{"name":"stdout","text":"aromatic zero values is 1018 and one value is 103\naromatic ratio is 9.88\nhydrocarbon zero values is 814 and one value is 307\nhydrocarbon ratio is 2.65\ncarboxylic_acid zero values is 956 and one value is 165\ncarboxylic_acid ratio is 5.79\nnitrogen_bearing_compound zero values is 982 and one value is 139\nnitrogen_bearing_compound ratio is 7.06\nchlorine_bearing_compound zero values is 1095 and one value is 26\nchlorine_bearing_compound ratio is 42.12\nsulfur_bearing_compound zero values is 1085 and one value is 36\nsulfur_bearing_compound ratio is 30.14\nalcohol zero values is 1087 and one value is 34\nalcohol ratio is 31.97\nother_oxygen_bearing_compound zero values is 1095 and one value is 26\nother_oxygen_bearing_compound ratio is 42.12\nmineral zero values is 941 and one value is 180\nmineral ratio is 5.23\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nimport xgboost as xgb\nfrom sklearn.multioutput import MultiOutputClassifier\nfrom sklearn.metrics import log_loss\nfrom xgboost import XGBClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import KFold","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:26:05.234537Z","iopub.execute_input":"2022-10-28T10:26:05.234951Z","iopub.status.idle":"2022-10-28T10:26:05.712763Z","shell.execute_reply.started":"2022-10-28T10:26:05.234911Z","shell.execute_reply":"2022-10-28T10:26:05.711863Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(features, final_labels, test_size=0.17, random_state=2000)","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:43:34.075237Z","iopub.execute_input":"2022-10-28T10:43:34.075613Z","iopub.status.idle":"2022-10-28T10:43:34.082561Z","shell.execute_reply.started":"2022-10-28T10:43:34.075582Z","shell.execute_reply":"2022-10-28T10:43:34.081530Z"},"trusted":true},"execution_count":134,"outputs":[]},{"cell_type":"code","source":"classifier = MultiOutputClassifier(XGBClassifier(tree_method='gpu_hist'))","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:43:34.778238Z","iopub.execute_input":"2022-10-28T10:43:34.778601Z","iopub.status.idle":"2022-10-28T10:43:34.784144Z","shell.execute_reply.started":"2022-10-28T10:43:34.778571Z","shell.execute_reply":"2022-10-28T10:43:34.783026Z"},"trusted":true},"execution_count":135,"outputs":[]},{"cell_type":"code","source":"clf = Pipeline([\n                ('classify', classifier)\n               ])\n\nparams = {#'classify__estimator__colsample_bytree': 0.50,\n          #'classify__estimator__gamma': 0.25,\n          #'classify__estimator__scale_pos_weight': 1.05,\n          #'classify__estimator__learning_rate': 0.01,\n          #'classify__estimator__max_delta_step': 1.50,\n          'classify__estimator__max_depth': 15,\n          'classify__estimator__min_child_weight': 1,\n          'classify__estimator__n_estimators': 248,\n          'classify__estimator__eval_metric': 'logloss',\n          'classify__estimator__colsample_bynode': 0.35,\n          'classify__estimator__colsample_bylevel': 0.40,\n          'classify__estimator__random_state': 2000,\n          #'classify__estimator__subsample': 0.90,\n          #'classify__estimator__booster': 'dart'\n         }\n\n_ = clf.set_params(**params)","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:43:40.279609Z","iopub.execute_input":"2022-10-28T10:43:40.280054Z","iopub.status.idle":"2022-10-28T10:43:40.291017Z","shell.execute_reply.started":"2022-10-28T10:43:40.280017Z","shell.execute_reply":"2022-10-28T10:43:40.290071Z"},"trusted":true},"execution_count":136,"outputs":[]},{"cell_type":"code","source":"clf.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:43:41.496271Z","iopub.execute_input":"2022-10-28T10:43:41.496632Z","iopub.status.idle":"2022-10-28T10:43:43.575900Z","shell.execute_reply.started":"2022-10-28T10:43:41.496593Z","shell.execute_reply":"2022-10-28T10:43:43.574841Z"},"trusted":true},"execution_count":137,"outputs":[{"execution_count":137,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('classify',\n                 MultiOutputClassifier(estimator=XGBClassifier(base_score=None,\n                                                               booster=None,\n                                                               callbacks=None,\n                                                               colsample_bylevel=0.4,\n                                                               colsample_bynode=0.35,\n                                                               colsample_bytree=None,\n                                                               early_stopping_rounds=None,\n                                                               enable_categorical=False,\n                                                               eval_metric='logloss',\n                                                               gamma=None,\n                                                               gpu_id=None,\n                                                               grow_policy=None,\n                                                               importance_type=None,\n                                                               interaction_constraints=None,\n                                                               learning_rate=None,\n                                                               max_bin=None,\n                                                               max_cat_to_onehot=None,\n                                                               max_delta_step=None,\n                                                               max_depth=15,\n                                                               max_leaves=None,\n                                                               min_child_weight=1,\n                                                               missing=nan,\n                                                               monotone_constraints=None,\n                                                               n_estimators=248,\n                                                               n_jobs=None,\n                                                               num_parallel_tree=None,\n                                                               predictor=None,\n                                                               random_state=2000,\n                                                               reg_alpha=None,\n                                                               reg_lambda=None, ...)))])"},"metadata":{}}]},{"cell_type":"code","source":"val_preds = clf.predict_proba(X_test)","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:43:44.608680Z","iopub.execute_input":"2022-10-28T10:43:44.609379Z","iopub.status.idle":"2022-10-28T10:43:44.639259Z","shell.execute_reply.started":"2022-10-28T10:43:44.609338Z","shell.execute_reply":"2022-10-28T10:43:44.638407Z"},"trusted":true},"execution_count":138,"outputs":[]},{"cell_type":"code","source":"val_preds = np.array(val_preds)[:,:,1].T\n#val_preds","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:43:45.869761Z","iopub.execute_input":"2022-10-28T10:43:45.870442Z","iopub.status.idle":"2022-10-28T10:43:45.876212Z","shell.execute_reply.started":"2022-10-28T10:43:45.870405Z","shell.execute_reply":"2022-10-28T10:43:45.875103Z"},"trusted":true},"execution_count":139,"outputs":[]},{"cell_type":"code","source":"loss = log_loss(np.ravel(y_test), np.ravel(val_preds))\nloss","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:43:47.339344Z","iopub.execute_input":"2022-10-28T10:43:47.339693Z","iopub.status.idle":"2022-10-28T10:43:47.349239Z","shell.execute_reply.started":"2022-10-28T10:43:47.339664Z","shell.execute_reply":"2022-10-28T10:43:47.348124Z"},"trusted":true},"execution_count":140,"outputs":[{"execution_count":140,"output_type":"execute_result","data":{"text/plain":"0.14461251716449303"},"metadata":{}}]},{"cell_type":"code","source":"## perdicting model out of this shit \n\nfinal_predictions = clf.predict_proba(final_test)","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:30:40.790391Z","iopub.execute_input":"2022-10-28T10:30:40.790757Z","iopub.status.idle":"2022-10-28T10:30:40.822306Z","shell.execute_reply.started":"2022-10-28T10:30:40.790727Z","shell.execute_reply":"2022-10-28T10:30:40.821608Z"},"trusted":true},"execution_count":91,"outputs":[]},{"cell_type":"code","source":"final_predictions = np.array(final_predictions)[:,:,1].T","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:30:42.943770Z","iopub.execute_input":"2022-10-28T10:30:42.944931Z","iopub.status.idle":"2022-10-28T10:30:42.950513Z","shell.execute_reply.started":"2022-10-28T10:30:42.944871Z","shell.execute_reply":"2022-10-28T10:30:42.949303Z"},"trusted":true},"execution_count":92,"outputs":[]},{"cell_type":"code","source":"submission = pd.read_csv(\"/kaggle/input/submission-format-mars-spectrometry/submission_format.csv\")","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:30:44.270380Z","iopub.execute_input":"2022-10-28T10:30:44.270749Z","iopub.status.idle":"2022-10-28T10:30:44.283157Z","shell.execute_reply.started":"2022-10-28T10:30:44.270717Z","shell.execute_reply":"2022-10-28T10:30:44.282293Z"},"trusted":true},"execution_count":93,"outputs":[]},{"cell_type":"code","source":"print(final_predictions.shape[0]-1)","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:30:49.677743Z","iopub.execute_input":"2022-10-28T10:30:49.678688Z","iopub.status.idle":"2022-10-28T10:30:49.683674Z","shell.execute_reply.started":"2022-10-28T10:30:49.678651Z","shell.execute_reply":"2022-10-28T10:30:49.682671Z"},"trusted":true},"execution_count":94,"outputs":[{"name":"stdout","text":"774\n","output_type":"stream"}]},{"cell_type":"code","source":"sample_id = submission['sample_id']","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:30:50.941070Z","iopub.execute_input":"2022-10-28T10:30:50.941428Z","iopub.status.idle":"2022-10-28T10:30:50.946355Z","shell.execute_reply.started":"2022-10-28T10:30:50.941398Z","shell.execute_reply":"2022-10-28T10:30:50.945404Z"},"trusted":true},"execution_count":95,"outputs":[]},{"cell_type":"code","source":"submission.drop(['sample_id'],axis=1, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:30:51.923545Z","iopub.execute_input":"2022-10-28T10:30:51.924231Z","iopub.status.idle":"2022-10-28T10:30:51.930139Z","shell.execute_reply.started":"2022-10-28T10:30:51.924194Z","shell.execute_reply":"2022-10-28T10:30:51.929072Z"},"trusted":true},"execution_count":96,"outputs":[]},{"cell_type":"code","source":"submission.iloc[0] = final_predictions[0]\nsubmission.head()","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:30:53.305475Z","iopub.execute_input":"2022-10-28T10:30:53.306049Z","iopub.status.idle":"2022-10-28T10:30:53.322697Z","shell.execute_reply.started":"2022-10-28T10:30:53.306012Z","shell.execute_reply":"2022-10-28T10:30:53.321834Z"},"trusted":true},"execution_count":97,"outputs":[{"execution_count":97,"output_type":"execute_result","data":{"text/plain":"   aromatic  hydrocarbon  carboxylic_acid  nitrogen_bearing_compound  \\\n0  0.251334      0.23938         0.133166                    0.41519   \n1  0.500000      0.50000         0.500000                    0.50000   \n2  0.500000      0.50000         0.500000                    0.50000   \n3  0.500000      0.50000         0.500000                    0.50000   \n4  0.500000      0.50000         0.500000                    0.50000   \n\n   chlorine_bearing_compound  sulfur_bearing_compound   alcohol  \\\n0                   0.270016                 0.286417  0.257461   \n1                   0.500000                 0.500000  0.500000   \n2                   0.500000                 0.500000  0.500000   \n3                   0.500000                 0.500000  0.500000   \n4                   0.500000                 0.500000  0.500000   \n\n   other_oxygen_bearing_compound   mineral  \n0                        0.24802  0.747394  \n1                        0.50000  0.500000  \n2                        0.50000  0.500000  \n3                        0.50000  0.500000  \n4                        0.50000  0.500000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>aromatic</th>\n      <th>hydrocarbon</th>\n      <th>carboxylic_acid</th>\n      <th>nitrogen_bearing_compound</th>\n      <th>chlorine_bearing_compound</th>\n      <th>sulfur_bearing_compound</th>\n      <th>alcohol</th>\n      <th>other_oxygen_bearing_compound</th>\n      <th>mineral</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.251334</td>\n      <td>0.23938</td>\n      <td>0.133166</td>\n      <td>0.41519</td>\n      <td>0.270016</td>\n      <td>0.286417</td>\n      <td>0.257461</td>\n      <td>0.24802</td>\n      <td>0.747394</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.500000</td>\n      <td>0.50000</td>\n      <td>0.500000</td>\n      <td>0.50000</td>\n      <td>0.500000</td>\n      <td>0.500000</td>\n      <td>0.500000</td>\n      <td>0.50000</td>\n      <td>0.500000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.500000</td>\n      <td>0.50000</td>\n      <td>0.500000</td>\n      <td>0.50000</td>\n      <td>0.500000</td>\n      <td>0.500000</td>\n      <td>0.500000</td>\n      <td>0.50000</td>\n      <td>0.500000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.500000</td>\n      <td>0.50000</td>\n      <td>0.500000</td>\n      <td>0.50000</td>\n      <td>0.500000</td>\n      <td>0.500000</td>\n      <td>0.500000</td>\n      <td>0.50000</td>\n      <td>0.500000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.500000</td>\n      <td>0.50000</td>\n      <td>0.500000</td>\n      <td>0.50000</td>\n      <td>0.500000</td>\n      <td>0.500000</td>\n      <td>0.500000</td>\n      <td>0.50000</td>\n      <td>0.500000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"final_predictions.shape","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:30:54.518466Z","iopub.execute_input":"2022-10-28T10:30:54.518853Z","iopub.status.idle":"2022-10-28T10:30:54.526366Z","shell.execute_reply.started":"2022-10-28T10:30:54.518812Z","shell.execute_reply":"2022-10-28T10:30:54.525182Z"},"trusted":true},"execution_count":98,"outputs":[{"execution_count":98,"output_type":"execute_result","data":{"text/plain":"(775, 9)"},"metadata":{}}]},{"cell_type":"code","source":"for i in range(0,final_predictions.shape[0],1):\n    submission.iloc[i] = final_predictions[i]","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:30:55.855711Z","iopub.execute_input":"2022-10-28T10:30:55.856285Z","iopub.status.idle":"2022-10-28T10:30:55.917544Z","shell.execute_reply.started":"2022-10-28T10:30:55.856249Z","shell.execute_reply":"2022-10-28T10:30:55.916542Z"},"trusted":true},"execution_count":99,"outputs":[]},{"cell_type":"code","source":"submission.tail()","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:30:57.087690Z","iopub.execute_input":"2022-10-28T10:30:57.088312Z","iopub.status.idle":"2022-10-28T10:30:57.106783Z","shell.execute_reply.started":"2022-10-28T10:30:57.088276Z","shell.execute_reply":"2022-10-28T10:30:57.105718Z"},"trusted":true},"execution_count":100,"outputs":[{"execution_count":100,"output_type":"execute_result","data":{"text/plain":"     aromatic  hydrocarbon  carboxylic_acid  nitrogen_bearing_compound  \\\n770  0.012327     0.135387         0.161384                   0.004805   \n771  0.003814     0.011582         0.213748                   0.017218   \n772  0.024499     0.529726         0.003117                   0.012043   \n773  0.029195     0.059907         0.301858                   0.016964   \n774  0.829299     0.118911         0.024267                   0.011490   \n\n     chlorine_bearing_compound  sulfur_bearing_compound   alcohol  \\\n770                   0.000403                 0.015769  0.016035   \n771                   0.000589                 0.001708  0.007309   \n772                   0.000208                 0.027529  0.013178   \n773                   0.000237                 0.005992  0.010180   \n774                   0.000248                 0.005148  0.044446   \n\n     other_oxygen_bearing_compound   mineral  \n770                       0.003903  0.012377  \n771                       0.000917  0.403072  \n772                       0.007550  0.035308  \n773                       0.001706  0.476181  \n774                       0.001166  0.704945  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>aromatic</th>\n      <th>hydrocarbon</th>\n      <th>carboxylic_acid</th>\n      <th>nitrogen_bearing_compound</th>\n      <th>chlorine_bearing_compound</th>\n      <th>sulfur_bearing_compound</th>\n      <th>alcohol</th>\n      <th>other_oxygen_bearing_compound</th>\n      <th>mineral</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>770</th>\n      <td>0.012327</td>\n      <td>0.135387</td>\n      <td>0.161384</td>\n      <td>0.004805</td>\n      <td>0.000403</td>\n      <td>0.015769</td>\n      <td>0.016035</td>\n      <td>0.003903</td>\n      <td>0.012377</td>\n    </tr>\n    <tr>\n      <th>771</th>\n      <td>0.003814</td>\n      <td>0.011582</td>\n      <td>0.213748</td>\n      <td>0.017218</td>\n      <td>0.000589</td>\n      <td>0.001708</td>\n      <td>0.007309</td>\n      <td>0.000917</td>\n      <td>0.403072</td>\n    </tr>\n    <tr>\n      <th>772</th>\n      <td>0.024499</td>\n      <td>0.529726</td>\n      <td>0.003117</td>\n      <td>0.012043</td>\n      <td>0.000208</td>\n      <td>0.027529</td>\n      <td>0.013178</td>\n      <td>0.007550</td>\n      <td>0.035308</td>\n    </tr>\n    <tr>\n      <th>773</th>\n      <td>0.029195</td>\n      <td>0.059907</td>\n      <td>0.301858</td>\n      <td>0.016964</td>\n      <td>0.000237</td>\n      <td>0.005992</td>\n      <td>0.010180</td>\n      <td>0.001706</td>\n      <td>0.476181</td>\n    </tr>\n    <tr>\n      <th>774</th>\n      <td>0.829299</td>\n      <td>0.118911</td>\n      <td>0.024267</td>\n      <td>0.011490</td>\n      <td>0.000248</td>\n      <td>0.005148</td>\n      <td>0.044446</td>\n      <td>0.001166</td>\n      <td>0.704945</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"submission['sample_id'] = sample_id","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:30:58.298873Z","iopub.execute_input":"2022-10-28T10:30:58.299581Z","iopub.status.idle":"2022-10-28T10:30:58.304925Z","shell.execute_reply.started":"2022-10-28T10:30:58.299544Z","shell.execute_reply":"2022-10-28T10:30:58.303935Z"},"trusted":true},"execution_count":101,"outputs":[]},{"cell_type":"code","source":"submission.head()","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:31:02.209713Z","iopub.execute_input":"2022-10-28T10:31:02.210446Z","iopub.status.idle":"2022-10-28T10:31:02.225494Z","shell.execute_reply.started":"2022-10-28T10:31:02.210409Z","shell.execute_reply":"2022-10-28T10:31:02.224364Z"},"trusted":true},"execution_count":102,"outputs":[{"execution_count":102,"output_type":"execute_result","data":{"text/plain":"   aromatic  hydrocarbon  carboxylic_acid  nitrogen_bearing_compound  \\\n0  0.251334     0.239380         0.133166                   0.415190   \n1  0.039030     0.106330         0.001332                   0.006414   \n2  0.008871     0.471804         0.009785                   0.024856   \n3  0.078670     0.075311         0.000748                   0.031584   \n4  0.136115     0.024828         0.001882                   0.007149   \n\n   chlorine_bearing_compound  sulfur_bearing_compound   alcohol  \\\n0                   0.270016                 0.286417  0.257461   \n1                   0.000203                 0.007129  0.006729   \n2                   0.003079                 0.046762  0.009173   \n3                   0.001569                 0.003835  0.006356   \n4                   0.000203                 0.007129  0.006729   \n\n   other_oxygen_bearing_compound   mineral sample_id  \n0                       0.248020  0.747394     S0809  \n1                       0.001166  0.975087     S0810  \n2                       0.020568  0.613093     S0811  \n3                       0.010940  0.784786     S0812  \n4                       0.001166  0.979270     S0813  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>aromatic</th>\n      <th>hydrocarbon</th>\n      <th>carboxylic_acid</th>\n      <th>nitrogen_bearing_compound</th>\n      <th>chlorine_bearing_compound</th>\n      <th>sulfur_bearing_compound</th>\n      <th>alcohol</th>\n      <th>other_oxygen_bearing_compound</th>\n      <th>mineral</th>\n      <th>sample_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.251334</td>\n      <td>0.239380</td>\n      <td>0.133166</td>\n      <td>0.415190</td>\n      <td>0.270016</td>\n      <td>0.286417</td>\n      <td>0.257461</td>\n      <td>0.248020</td>\n      <td>0.747394</td>\n      <td>S0809</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.039030</td>\n      <td>0.106330</td>\n      <td>0.001332</td>\n      <td>0.006414</td>\n      <td>0.000203</td>\n      <td>0.007129</td>\n      <td>0.006729</td>\n      <td>0.001166</td>\n      <td>0.975087</td>\n      <td>S0810</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.008871</td>\n      <td>0.471804</td>\n      <td>0.009785</td>\n      <td>0.024856</td>\n      <td>0.003079</td>\n      <td>0.046762</td>\n      <td>0.009173</td>\n      <td>0.020568</td>\n      <td>0.613093</td>\n      <td>S0811</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.078670</td>\n      <td>0.075311</td>\n      <td>0.000748</td>\n      <td>0.031584</td>\n      <td>0.001569</td>\n      <td>0.003835</td>\n      <td>0.006356</td>\n      <td>0.010940</td>\n      <td>0.784786</td>\n      <td>S0812</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.136115</td>\n      <td>0.024828</td>\n      <td>0.001882</td>\n      <td>0.007149</td>\n      <td>0.000203</td>\n      <td>0.007129</td>\n      <td>0.006729</td>\n      <td>0.001166</td>\n      <td>0.979270</td>\n      <td>S0813</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"submission.to_csv(\"/kaggle/working/submission15.csv\")","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:31:08.975528Z","iopub.execute_input":"2022-10-28T10:31:08.975931Z","iopub.status.idle":"2022-10-28T10:31:08.994604Z","shell.execute_reply.started":"2022-10-28T10:31:08.975898Z","shell.execute_reply":"2022-10-28T10:31:08.993724Z"},"trusted":true},"execution_count":103,"outputs":[]},{"cell_type":"code","source":"X = np.array(features)\ny = np.array(final_labels)\noof_preds = np.zeros(y.shape)\ntest_preds = np.zeros((final_test.shape[0],y.shape[1]))\noof_losses = []\nNFOLDS = 15\nkf = KFold(n_splits=NFOLDS)\nfor fn, (trn_idx, val_idx) in enumerate(kf.split(X, y)):\n    print('Starting fold: ', fn)\n    X_train, X_val = X[trn_idx], X[val_idx]\n    y_train, y_val = y[trn_idx], y[val_idx]\n    \n    # drop where cp_type==ctl_vehicle (baseline)\n    #ctl_mask = X_train[:,0]=='ctl_vehicle'\n    #X_train = X_train[~ctl_mask,:]\n    #y_train = y_train[~ctl_mask]\n    \n    clf.fit(X_train, y_train)\n    val_preds = clf.predict_proba(X_val) # list of preds per class\n    val_preds = np.array(val_preds)[:,:,1].T # take the positive class\n    oof_preds[val_idx] = val_preds\n    \n    loss = log_loss(np.ravel(y_val), np.ravel(val_preds))\n    oof_losses.append(loss)\n    preds = clf.predict_proba(final_test)\n    preds = np.array(preds)[:,:,1].T # take the positive \n    print(preds.shape)\n    test_preds += preds / NFOLDS\n    \nprint(oof_losses)\nprint('Mean OOF loss across folds', np.mean(oof_losses))\nprint('STD OOF loss across folds', np.std(oof_losses))","metadata":{"execution":{"iopub.status.busy":"2022-10-28T10:44:08.442235Z","iopub.execute_input":"2022-10-28T10:44:08.442691Z","iopub.status.idle":"2022-10-28T10:44:42.590488Z","shell.execute_reply.started":"2022-10-28T10:44:08.442649Z","shell.execute_reply":"2022-10-28T10:44:42.589554Z"},"trusted":true},"execution_count":141,"outputs":[{"name":"stdout","text":"Starting fold:  0\n(775, 9)\nStarting fold:  1\n(775, 9)\nStarting fold:  2\n(775, 9)\nStarting fold:  3\n(775, 9)\nStarting fold:  4\n(775, 9)\nStarting fold:  5\n(775, 9)\nStarting fold:  6\n(775, 9)\nStarting fold:  7\n(775, 9)\nStarting fold:  8\n(775, 9)\nStarting fold:  9\n(775, 9)\nStarting fold:  10\n(775, 9)\nStarting fold:  11\n(775, 9)\nStarting fold:  12\n(775, 9)\nStarting fold:  13\n(775, 9)\nStarting fold:  14\n(775, 9)\n[0.1726214623398792, 0.16016578525873937, 0.2380729092803732, 0.2155602991783181, 0.14466241104794553, 0.14615669826039165, 0.12775934171591263, 0.2258102571763771, 0.1575335650055031, 0.1682500108281642, 0.1489847066318422, 0.20947545012510288, 0.169965096473742, 0.17604192425937368, 0.16779394457736382]\nMean OOF loss across folds 0.17525692414393523\nSTD OOF loss across folds 0.03131354585566276\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}