{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6583504,"sourceType":"datasetVersion","datasetId":3800735},{"sourceId":6690469,"sourceType":"datasetVersion","datasetId":3857937}],"dockerImageVersionId":30558,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2023-10-29T13:50:58.612445Z","iopub.execute_input":"2023-10-29T13:50:58.612888Z","iopub.status.idle":"2023-10-29T13:50:59.058469Z","shell.execute_reply.started":"2023-10-29T13:50:58.612851Z","shell.execute_reply":"2023-10-29T13:50:59.057198Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/daily-data-master-nbfc/CANFINHOME_D.csv\")\ndf","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:50:59.060531Z","iopub.execute_input":"2023-10-29T13:50:59.061029Z","iopub.status.idle":"2023-10-29T13:50:59.131400Z","shell.execute_reply.started":"2023-10-29T13:50:59.061000Z","shell.execute_reply":"2023-10-29T13:50:59.130044Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# new_data = pd.DataFrame()\n# new_data['Date'] = ['2023-10-03', '2023-10-04','2023-10-05','2023-10-06','2023-10-09','2023-10-10','2023-10-11','2023-10-12','2023-10-13']\n# new_data['Open'] = [386.8, 395.55,395.90,391.00,385.05,389.00,389.30,391.90,398.85]\n# new_data['High'] = [404, 396.95,399.35,397.35,389.10,390.00,391.55,400.70,413.70]\n# new_data['Low'] = [382.35, 385.05,388.05,390.05,380.80,382.50,383.25,389.05,390.60]\n# new_data['Close'] = [396.95, 393.95,390.00,394.85,383.90,383.85,388.00,398.85,394.75]\n# new_data['Adj Close'] = [396.95, 393.95,390.00,394.85,383.90,383.85,388.00,398.85,394.75]\n# new_data['Volume'] = [265152, 164808,78212,81043,156567,62930,70225,294774,680034]\n\n# df = pd.concat([df,new_data],axis=0)\n# df","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:50:59.132768Z","iopub.execute_input":"2023-10-29T13:50:59.133092Z","iopub.status.idle":"2023-10-29T13:50:59.139922Z","shell.execute_reply.started":"2023-10-29T13:50:59.133065Z","shell.execute_reply":"2023-10-29T13:50:59.138315Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# df = df.reset_index()","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:50:59.143776Z","iopub.execute_input":"2023-10-29T13:50:59.144438Z","iopub.status.idle":"2023-10-29T13:50:59.152013Z","shell.execute_reply.started":"2023-10-29T13:50:59.144402Z","shell.execute_reply":"2023-10-29T13:50:59.150696Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def feature_creations(df):\n    df['gaps'] = 0\n    df['change_in_vol'] = 0\n    df['intraday_return'] = round((df['Close']-df['Open'])*100/df['Open'],2)\n    df['volatility'] = round((df['High']-df['Low'])*100/df['Low'],2)\n    for index in range(1,df.shape[0],1):\n        df['gaps'][index] = df['Open'][index] - df['Close'][index-1]\n        df['change_in_vol'][index] = df['Volume'][index] - df['Volume'][index-1]\n    \n    return df","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:50:59.155679Z","iopub.execute_input":"2023-10-29T13:50:59.156423Z","iopub.status.idle":"2023-10-29T13:50:59.167106Z","shell.execute_reply.started":"2023-10-29T13:50:59.156376Z","shell.execute_reply":"2023-10-29T13:50:59.166224Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data = feature_creations(df)\ndata","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2023-10-29T13:50:59.168924Z","iopub.execute_input":"2023-10-29T13:50:59.169687Z","iopub.status.idle":"2023-10-29T13:50:59.756643Z","shell.execute_reply.started":"2023-10-29T13:50:59.169633Z","shell.execute_reply":"2023-10-29T13:50:59.754315Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom statistics import mean\nfrom scipy.stats import norm\nimport statistics\n\ndef joint_probability_density(df):\n    sns.displot(df['intraday_return']) ## by design it goes with standard normal distribution\n    sns.displot(df['volatility'])  ## by design it has right skewed distribution \n    cdf = norm.cdf(df['volatility']) ## CDF distribution for volatility\n    pdf_ = (1/np.sqrt(2*3.14))*(2.71)**(((-1)*(df['volatility']*(3))**2)/2*statistics.variance(df['volatility'].fillna(0).astype(int))) ## PDF distribution for volatility\n    skewed_distribution = cdf*pdf_   ## skewed distribution for volatility\n    return_ = (1/np.sqrt(2*3.14))*(2.71)**(((-1)*(df['intraday_return'])**2)/2*statistics.variance(df['intraday_return'].fillna(0).astype(int))) ## standard normal distribution for intraday return\n    df['joint_pdf_vol_return'] = return_*skewed_distribution  ## joint pdf function for both volatility and intraday return\n    return df\n    \n    \n    ","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:50:59.758863Z","iopub.execute_input":"2023-10-29T13:50:59.759907Z","iopub.status.idle":"2023-10-29T13:51:01.593477Z","shell.execute_reply.started":"2023-10-29T13:50:59.759857Z","shell.execute_reply":"2023-10-29T13:51:01.592389Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data = joint_probability_density(df)","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:51:01.594801Z","iopub.execute_input":"2023-10-29T13:51:01.595407Z","iopub.status.idle":"2023-10-29T13:51:03.069282Z","shell.execute_reply.started":"2023-10-29T13:51:01.595368Z","shell.execute_reply":"2023-10-29T13:51:03.068140Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:51:03.070548Z","iopub.execute_input":"2023-10-29T13:51:03.070962Z","iopub.status.idle":"2023-10-29T13:51:03.111745Z","shell.execute_reply.started":"2023-10-29T13:51:03.070923Z","shell.execute_reply":"2023-10-29T13:51:03.110527Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## heavy changes have been made to the below code to support binary classification problem","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:51:03.115866Z","iopub.execute_input":"2023-10-29T13:51:03.116819Z","iopub.status.idle":"2023-10-29T13:51:03.122397Z","shell.execute_reply.started":"2023-10-29T13:51:03.116771Z","shell.execute_reply":"2023-10-29T13:51:03.121168Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"quant = data['intraday_return'].quantile([0.55,0.55,0.55])\nlabel = []\npoint = []\nfor value in data['intraday_return']:\n    if value <= quant.values[0]:\n        label.append('Bearish')\n        point.append(int(0))\n    elif quant.values[0] < value <= quant.values[2]:\n        label.append('Consolidation')\n        point.append(int(0))\n    else:\n        label.append('Bullish')\n        point.append(int(1))\n\ndata['Label'] = label\ndata['intraday_dummy'] = point\nprint(data['Label'].value_counts())\nprint(quant)","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:53:27.582442Z","iopub.execute_input":"2023-10-29T13:53:27.582853Z","iopub.status.idle":"2023-10-29T13:53:27.629794Z","shell.execute_reply.started":"2023-10-29T13:53:27.582823Z","shell.execute_reply":"2023-10-29T13:53:27.628607Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"array = [0.55,0.55,0.55] ## Very important to fix this first and then go forward ","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:53:28.461592Z","iopub.execute_input":"2023-10-29T13:53:28.461998Z","iopub.status.idle":"2023-10-29T13:53:28.467733Z","shell.execute_reply.started":"2023-10-29T13:53:28.461968Z","shell.execute_reply":"2023-10-29T13:53:28.466435Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"quantiles = data['volatility'].quantile(array)\n\npoint = []\nfor value in data['volatility']:\n    if value <= quantiles.values[0]:\n        point.append(int(0))\n    elif quantiles.values[0] < value <= quantiles.values[2]:\n        point.append(int(0))\n    else:\n        point.append(int(1))\n\n\ndata['volatility_dummy'] = point","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:53:30.103366Z","iopub.execute_input":"2023-10-29T13:53:30.103815Z","iopub.status.idle":"2023-10-29T13:53:30.144811Z","shell.execute_reply.started":"2023-10-29T13:53:30.103782Z","shell.execute_reply":"2023-10-29T13:53:30.143529Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"quantiles = data['gaps'].quantile(array)\npoint = []\nfor value in data['gaps']:\n    if value <= quantiles.values[0]:\n        point.append(int(0))\n    elif quantiles.values[0] < value <= quantiles.values[2]:\n        point.append(int(0))\n    else:\n        point.append(int(1))\n\n\ndata['gaps_dummy'] = point","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:53:30.335563Z","iopub.execute_input":"2023-10-29T13:53:30.336030Z","iopub.status.idle":"2023-10-29T13:53:30.377733Z","shell.execute_reply.started":"2023-10-29T13:53:30.335995Z","shell.execute_reply":"2023-10-29T13:53:30.376519Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"quantiles = data['gaps'].quantile(array)\nquantiles","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:53:30.544069Z","iopub.execute_input":"2023-10-29T13:53:30.544547Z","iopub.status.idle":"2023-10-29T13:53:30.556712Z","shell.execute_reply.started":"2023-10-29T13:53:30.544514Z","shell.execute_reply":"2023-10-29T13:53:30.555553Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"quantiles = data['change_in_vol'].quantile(array)\npoint = []\nfor value in data['change_in_vol']:\n    if value <= quantiles.values[0]:\n        point.append(int(0))\n    elif quantiles.values[0] < value <= quantiles.values[2]:\n        point.append(int(0))\n    else:\n        point.append(int(1))\n\n\ndata['chng_vol_dummy'] = point","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:53:39.032157Z","iopub.execute_input":"2023-10-29T13:53:39.032576Z","iopub.status.idle":"2023-10-29T13:53:39.077095Z","shell.execute_reply.started":"2023-10-29T13:53:39.032543Z","shell.execute_reply":"2023-10-29T13:53:39.075841Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"quantiles = data['joint_pdf_vol_return'].quantile(array)\npoint = []\nfor value in data['joint_pdf_vol_return']:\n    if value <= quantiles.values[0]:\n        point.append(int(0))\n    elif quantiles.values[0] < value <= quantiles.values[2]:\n        point.append(int(0))\n    else:\n        point.append(int(1))\n\n\ndata['chng_jpdf_dummy'] = point","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:53:39.541338Z","iopub.execute_input":"2023-10-29T13:53:39.541733Z","iopub.status.idle":"2023-10-29T13:53:39.582980Z","shell.execute_reply.started":"2023-10-29T13:53:39.541701Z","shell.execute_reply":"2023-10-29T13:53:39.581861Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:53:39.915367Z","iopub.execute_input":"2023-10-29T13:53:39.915756Z","iopub.status.idle":"2023-10-29T13:53:39.950747Z","shell.execute_reply.started":"2023-10-29T13:53:39.915725Z","shell.execute_reply":"2023-10-29T13:53:39.949843Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def creating_rolling_variables(df):\n    df['4_EMA'] = round(df['intraday_return'].ewm(span=4, adjust=False).mean(),2)\n    df['5_EMA'] = round(df['intraday_return'].ewm(span=5, adjust=False).mean(),2)\n    df['9_EMA'] = round(df['intraday_return'].ewm(span=9, adjust=False).mean(),2)\n    df['15_EMA'] = round(df['intraday_return'].ewm(span=15, adjust=False).mean(),2)\n    return df\n    ","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:53:44.563918Z","iopub.execute_input":"2023-10-29T13:53:44.565406Z","iopub.status.idle":"2023-10-29T13:53:44.574884Z","shell.execute_reply.started":"2023-10-29T13:53:44.565353Z","shell.execute_reply":"2023-10-29T13:53:44.573228Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data = creating_rolling_variables(data)","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:53:44.780827Z","iopub.execute_input":"2023-10-29T13:53:44.782379Z","iopub.status.idle":"2023-10-29T13:53:44.791669Z","shell.execute_reply.started":"2023-10-29T13:53:44.782327Z","shell.execute_reply":"2023-10-29T13:53:44.790731Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"quantiles = data['4_EMA'].quantile(array)\npoint = []\nfor value in data['4_EMA']:\n    if value <= quantiles.values[0]:\n        point.append(int(0))\n    elif quantiles.values[0] < value <= quantiles.values[2]:\n        point.append(int(0))\n    else:\n        point.append(int(1))\n\n\ndata['4_EMA_dummy'] = point","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:53:46.550962Z","iopub.execute_input":"2023-10-29T13:53:46.551385Z","iopub.status.idle":"2023-10-29T13:53:46.593807Z","shell.execute_reply.started":"2023-10-29T13:53:46.551353Z","shell.execute_reply":"2023-10-29T13:53:46.592213Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"quantiles = data['5_EMA'].quantile(array)\npoint = []\nfor value in data['5_EMA']:\n    if value <= quantiles.values[0]:\n        point.append(int(0))\n    elif quantiles.values[0] < value <= quantiles.values[2]:\n        point.append(int(0))\n    else:\n        point.append(int(1))\n\n\ndata['5_EMA_dummy'] = point","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:53:46.782316Z","iopub.execute_input":"2023-10-29T13:53:46.782726Z","iopub.status.idle":"2023-10-29T13:53:46.825821Z","shell.execute_reply.started":"2023-10-29T13:53:46.782696Z","shell.execute_reply":"2023-10-29T13:53:46.824483Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"quantiles = data['9_EMA'].quantile(array)\npoint = []\nfor value in data['9_EMA']:\n    if value <= quantiles.values[0]:\n        point.append(int(0))\n    elif quantiles.values[0] < value <= quantiles.values[2]:\n        point.append(int(0))\n    else:\n        point.append(int(1))\n\n\ndata['9_EMA_dummy'] = point","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:53:48.843518Z","iopub.execute_input":"2023-10-29T13:53:48.843941Z","iopub.status.idle":"2023-10-29T13:53:48.885283Z","shell.execute_reply.started":"2023-10-29T13:53:48.843909Z","shell.execute_reply":"2023-10-29T13:53:48.883883Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"quantiles = data['15_EMA'].quantile(array)\npoint = []\nfor value in data['15_EMA']:\n    if value <= quantiles.values[0]:\n        point.append(int(0))\n    elif quantiles.values[0] < value <= quantiles.values[2]:\n        point.append(int(0))\n    else:\n        point.append(int(1))\n\n\ndata['15_EMA_dummy'] = point","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:53:49.043573Z","iopub.execute_input":"2023-10-29T13:53:49.044061Z","iopub.status.idle":"2023-10-29T13:53:49.087332Z","shell.execute_reply.started":"2023-10-29T13:53:49.044025Z","shell.execute_reply":"2023-10-29T13:53:49.085841Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.columns","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:53:50.439837Z","iopub.execute_input":"2023-10-29T13:53:50.440330Z","iopub.status.idle":"2023-10-29T13:53:50.448631Z","shell.execute_reply.started":"2023-10-29T13:53:50.440293Z","shell.execute_reply":"2023-10-29T13:53:50.447213Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"FEATURES_PRE_ML = ['Open','Close','volatility_dummy',\n       'gaps_dummy', 'chng_vol_dummy', 'chng_jpdf_dummy', '4_EMA', '5_EMA',\n       '9_EMA', '15_EMA', '4_EMA_dummy', '5_EMA_dummy', '9_EMA_dummy',\n       '15_EMA_dummy']","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:53:51.284750Z","iopub.execute_input":"2023-10-29T13:53:51.285217Z","iopub.status.idle":"2023-10-29T13:53:51.292235Z","shell.execute_reply.started":"2023-10-29T13:53:51.285181Z","shell.execute_reply":"2023-10-29T13:53:51.290541Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import umap\ntemp = data[FEATURES_PRE_ML].fillna(value=data[FEATURES_PRE_ML].mean())\nmanifold = umap.UMAP().fit(temp, data['intraday_dummy'])","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2023-10-29T13:53:55.353012Z","iopub.execute_input":"2023-10-29T13:53:55.354468Z","iopub.status.idle":"2023-10-29T13:55:09.620971Z","shell.execute_reply.started":"2023-10-29T13:53:55.354415Z","shell.execute_reply":"2023-10-29T13:55:09.619661Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import umap.plot\numap.plot.points(manifold,labels=data['intraday_dummy'], theme=\"fire\")","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:55:33.358862Z","iopub.execute_input":"2023-10-29T13:55:33.359714Z","iopub.status.idle":"2023-10-29T13:55:38.860617Z","shell.execute_reply.started":"2023-10-29T13:55:33.359674Z","shell.execute_reply":"2023-10-29T13:55:38.859311Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"umap_model = umap.UMAP(n_components=2, n_neighbors = 15, min_dist = 0.1,random_state=42)\nfeatures = umap_model.fit_transform(temp)\numap_df = pd.DataFrame(features, columns=[f'umap{i+1}' for i in range(features.shape[1])])\numap_df","metadata":{"execution":{"iopub.status.busy":"2023-10-29T13:55:42.457961Z","iopub.execute_input":"2023-10-29T13:55:42.459023Z","iopub.status.idle":"2023-10-29T13:55:53.736801Z","shell.execute_reply.started":"2023-10-29T13:55:42.458979Z","shell.execute_reply":"2023-10-29T13:55:53.735441Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data = pd.concat([data,umap_df],axis=1)\ndata","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:02:59.404954Z","iopub.execute_input":"2023-10-29T14:02:59.406547Z","iopub.status.idle":"2023-10-29T14:02:59.454029Z","shell.execute_reply.started":"2023-10-29T14:02:59.406483Z","shell.execute_reply":"2023-10-29T14:02:59.452443Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **PREPARATION FOR NEXT DAY PREDICTION FEATURES**","metadata":{}},{"cell_type":"code","source":"pd.set_option('display.max_columns', None)","metadata":{"execution":{"iopub.status.busy":"2023-10-25T11:49:53.686285Z","iopub.execute_input":"2023-10-25T11:49:53.686614Z","iopub.status.idle":"2023-10-25T11:49:53.691342Z","shell.execute_reply.started":"2023-10-25T11:49:53.686585Z","shell.execute_reply":"2023-10-25T11:49:53.690186Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"nxt_prep = data.tail(11)","metadata":{"execution":{"iopub.status.busy":"2023-10-25T11:49:53.692453Z","iopub.execute_input":"2023-10-25T11:49:53.693044Z","iopub.status.idle":"2023-10-25T11:49:53.705319Z","shell.execute_reply.started":"2023-10-25T11:49:53.693014Z","shell.execute_reply":"2023-10-25T11:49:53.704163Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"nxt_prep = nxt_prep.reset_index()\nnxt_prep","metadata":{"execution":{"iopub.status.busy":"2023-10-25T11:49:53.707073Z","iopub.execute_input":"2023-10-25T11:49:53.707509Z","iopub.status.idle":"2023-10-25T11:49:53.747261Z","shell.execute_reply.started":"2023-10-25T11:49:53.707469Z","shell.execute_reply":"2023-10-25T11:49:53.746212Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pred_df = pd.DataFrame()","metadata":{"execution":{"iopub.status.busy":"2023-10-25T11:49:53.749012Z","iopub.execute_input":"2023-10-25T11:49:53.749432Z","iopub.status.idle":"2023-10-25T11:49:53.754582Z","shell.execute_reply.started":"2023-10-25T11:49:53.749397Z","shell.execute_reply":"2023-10-25T11:49:53.753540Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pred_df['Date'] = ['2023-10-13']## input t\npred_df['Open'] = [398.85]## inputs t\npred_df['gaps'] = [0.00]## inputs t\npred_df['gaps_dummy'] = [0] ## inputs t","metadata":{"execution":{"iopub.status.busy":"2023-10-25T11:49:53.755920Z","iopub.execute_input":"2023-10-25T11:49:53.756321Z","iopub.status.idle":"2023-10-25T11:49:53.770544Z","shell.execute_reply.started":"2023-10-25T11:49:53.756276Z","shell.execute_reply":"2023-10-25T11:49:53.769469Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# ## below are all the lag variables which would require inputs at t-delta \n\n# pred_df['intraday_return_lag1'] = nxt_prep['intraday_dummy'][9]\n# pred_df['intraday_return_lag2'] = nxt_prep['intraday_dummy'][8]\n# pred_df['intraday_return_lag3'] = nxt_prep['intraday_dummy'][7]\n# pred_df['intraday_return_lag4'] = nxt_prep['intraday_dummy'][6]\n# pred_df['intraday_return_lag5'] = nxt_prep['intraday_dummy'][5]\n# pred_df['intraday_return_lag6'] = nxt_prep['intraday_dummy'][4]\n# pred_df['intraday_return_lag7'] = nxt_prep['intraday_dummy'][3]\n# pred_df['intraday_return_lag8'] = nxt_prep['intraday_dummy'][2]\n# pred_df['intraday_return_lag9'] = nxt_prep['intraday_dummy'][1]\n# pred_df['intraday_return_lag10'] = nxt_prep['intraday_dummy'][0]\n# ###############################\n# pred_df['volatility_dummy_lag1'] = nxt_prep['volatility_dummy'][9]\n# pred_df['volatility_dummy_lag2'] = nxt_prep['volatility_dummy'][8]\n# pred_df['volatility_dummy_lag3'] = nxt_prep['volatility_dummy'][7]\n# pred_df['volatility_dummy_lag4'] = nxt_prep['volatility_dummy'][6]\n# pred_df['volatility_dummy_lag5'] = nxt_prep['volatility_dummy'][5]\n# pred_df['volatility_dummy_lag6'] = nxt_prep['volatility_dummy'][4]\n# pred_df['volatility_dummy_lag7'] = nxt_prep['volatility_dummy'][3]\n# pred_df['volatility_dummy_lag8'] = nxt_prep['volatility_dummy'][2]\n# pred_df['volatility_dummy_lag9'] = nxt_prep['volatility_dummy'][1]\n# pred_df['volatility_dummy_lag10'] = nxt_prep['volatility_dummy'][0]\n# #################################\n# pred_df['vol_dummy_lag1'] = nxt_prep['chng_vol_dummy'][9]\n# pred_df['vol_dummy_lag2'] = nxt_prep['chng_vol_dummy'][8]\n# pred_df['vol_dummy_lag3'] = nxt_prep['chng_vol_dummy'][7]\n# pred_df['vol_dummy_lag4'] = nxt_prep['chng_vol_dummy'][6]\n# pred_df['vol_dummy_lag5'] = nxt_prep['chng_vol_dummy'][5]\n# pred_df['vol_dummy_lag6'] = nxt_prep['chng_vol_dummy'][4]\n# ##################################\n# pred_df['4_EMA_dummy_lag1'] = nxt_prep['4_EMA_dummy'][9]\n# pred_df['4_EMA_dummy_lag2'] = nxt_prep['4_EMA_dummy'][8]\n# pred_df['5_EMA_dummy_lag1'] = nxt_prep['5_EMA_dummy'][7]\n# pred_df['5_EMA_dummy_lag2'] = nxt_prep['5_EMA_dummy'][6]\n# pred_df['9_EMA_dummy_lag1'] = nxt_prep['9_EMA_dummy'][5]\n# pred_df['9_EMA_dummy_lag2'] = nxt_prep['9_EMA_dummy'][4]\n# pred_df['15_EMA_dummy_lag1'] = nxt_prep['15_EMA_dummy'][3]\n# pred_df['15_EMA_dummy_lag2'] = nxt_prep['15_EMA_dummy'][2]\n# #################################\n# pred_df['chng_jpdf_dummy_lag1'] = nxt_prep['chng_jpdf_dummy'][9]\n# ################################\n# pred_df['umap1_lag1'] = nxt_prep['umap1'][9]\n# pred_df['umap1_lag2'] = nxt_prep['umap1'][8]\n# pred_df['umap2_lag1'] = nxt_prep['umap2'][9]\n# pred_df['umap2_lag2'] = nxt_prep['umap2'][8]\n# pred_df['umap3_lag1'] = nxt_prep['umap3'][9]\n# pred_df['umap3_lag2'] = nxt_prep['umap3'][8]\n# ##################################\n# pred_df['Open_lag1'] = nxt_prep['Open'][9]\n# pred_df['Open_lag2'] = nxt_prep['Open'][8]\n# pred_df['Close_lag1'] = nxt_prep['Close'][9]\n# pred_df['Close_lag2'] = nxt_prep['Close'][8]\n# pred_df['Close_lag3'] = nxt_prep['Close'][7]","metadata":{"execution":{"iopub.status.busy":"2023-10-25T11:50:22.175185Z","iopub.execute_input":"2023-10-25T11:50:22.175789Z","iopub.status.idle":"2023-10-25T11:50:22.182535Z","shell.execute_reply.started":"2023-10-25T11:50:22.175750Z","shell.execute_reply":"2023-10-25T11:50:22.181697Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pd.set_option('display.max_columns', None)","metadata":{"execution":{"iopub.status.busy":"2023-10-25T11:50:22.991414Z","iopub.execute_input":"2023-10-25T11:50:22.991794Z","iopub.status.idle":"2023-10-25T11:50:22.996707Z","shell.execute_reply.started":"2023-10-25T11:50:22.991764Z","shell.execute_reply":"2023-10-25T11:50:22.995576Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pred_df","metadata":{"execution":{"iopub.status.busy":"2023-10-25T11:50:23.231444Z","iopub.execute_input":"2023-10-25T11:50:23.231886Z","iopub.status.idle":"2023-10-25T11:50:23.262055Z","shell.execute_reply.started":"2023-10-25T11:50:23.231851Z","shell.execute_reply":"2023-10-25T11:50:23.260488Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **PREDICTION FEATURE CREATION COMPLETED!!!**","metadata":{}},{"cell_type":"code","source":"def creating_lag_variables(df):\n    df['intraday_return_lag1'] = df['intraday_dummy'].shift(1)\n    df['intraday_return_lag2'] = df['intraday_dummy'].shift(2)\n    df['intraday_return_lag3'] = df['intraday_dummy'].shift(3)\n    df['intraday_return_lag4'] = df['intraday_dummy'].shift(4)\n    df['intraday_return_lag5'] = df['intraday_dummy'].shift(5)\n    df['intraday_return_lag6'] = df['intraday_dummy'].shift(6)\n    df['intraday_return_lag7'] = df['intraday_dummy'].shift(7)\n    df['intraday_return_lag8'] = df['intraday_dummy'].shift(8)\n    df['intraday_return_lag9'] = df['intraday_dummy'].shift(9)\n    df['intraday_return_lag10'] = df['intraday_dummy'].shift(10)\n    ###############################\n    df['volatility_dummy_lag1'] = df['volatility_dummy'].shift(1)\n    df['volatility_dummy_lag2'] = df['volatility_dummy'].shift(2)\n    df['volatility_dummy_lag3'] = df['volatility_dummy'].shift(3)\n    df['volatility_dummy_lag4'] = df['volatility_dummy'].shift(4)\n    df['volatility_dummy_lag5'] = df['volatility_dummy'].shift(5)\n    df['volatility_dummy_lag6'] = df['volatility_dummy'].shift(6)\n    df['volatility_dummy_lag7'] = df['volatility_dummy'].shift(7)\n    df['volatility_dummy_lag8'] = df['volatility_dummy'].shift(8)\n    df['volatility_dummy_lag9'] = df['volatility_dummy'].shift(9)\n    df['volatility_dummy_lag10'] = df['volatility_dummy'].shift(10)\n    #################################\n    df['vol_dummy_lag1'] = df['chng_vol_dummy'].shift(1)\n    df['vol_dummy_lag2'] = df['chng_vol_dummy'].shift(2)\n    df['vol_dummy_lag3'] = df['chng_vol_dummy'].shift(3)\n    df['vol_dummy_lag4'] = df['chng_vol_dummy'].shift(4)\n    df['vol_dummy_lag5'] = df['chng_vol_dummy'].shift(5)\n    df['vol_dummy_lag6'] = df['chng_vol_dummy'].shift(6)\n    ##################################\n    df['4_EMA_dummy_lag1'] = df['4_EMA_dummy'].shift(1)\n    df['4_EMA_dummy_lag2'] = df['4_EMA_dummy'].shift(2)\n    df['5_EMA_dummy_lag1'] = df['5_EMA_dummy'].shift(1)\n    df['5_EMA_dummy_lag2'] = df['5_EMA_dummy'].shift(2)\n    df['9_EMA_dummy_lag1'] = df['9_EMA_dummy'].shift(1)\n    df['9_EMA_dummy_lag2'] = df['9_EMA_dummy'].shift(2)\n    df['15_EMA_dummy_lag1'] = df['15_EMA_dummy'].shift(1)\n    df['15_EMA_dummy_lag2'] = df['15_EMA_dummy'].shift(2)\n    #################################\n    df['chng_jpdf_dummy_lag1'] = df['chng_jpdf_dummy'].shift(1)\n    ################################\n    df['umap1_lag1'] = df['umap1'].shift(1)\n    df['umap1_lag2'] = df['umap1'].shift(2)\n    df['umap2_lag1'] = df['umap2'].shift(1)\n    df['umap2_lag2'] = df['umap2'].shift(2)\n    #df['umap3_lag1'] = df['umap3'].shift(1)\n    #df['umap3_lag2'] = df['umap3'].shift(2)\n    ##################################\n    df['Open_lag1'] = df['Open'].shift(1)\n    df['Open_lag2'] = df['Open'].shift(2)\n    df['Close_lag1'] = df['Close'].shift(1)\n    df['Close_lag2'] = df['Close'].shift(2)\n    df['Close_lag3'] = df['Close'].shift(3)\n    \n    \n    return df\n    \n    ","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:03:07.833014Z","iopub.execute_input":"2023-10-29T14:03:07.833501Z","iopub.status.idle":"2023-10-29T14:03:07.855571Z","shell.execute_reply.started":"2023-10-29T14:03:07.833467Z","shell.execute_reply":"2023-10-29T14:03:07.854215Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pd.options.mode.chained_assignment = None  # default='warn'\npd.set_option('display.max_columns', None)","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:03:08.584384Z","iopub.execute_input":"2023-10-29T14:03:08.584865Z","iopub.status.idle":"2023-10-29T14:03:08.591421Z","shell.execute_reply.started":"2023-10-29T14:03:08.584830Z","shell.execute_reply":"2023-10-29T14:03:08.590200Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"final_data = creating_lag_variables(data)\nfinal_data","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:03:08.918557Z","iopub.execute_input":"2023-10-29T14:03:08.918957Z","iopub.status.idle":"2023-10-29T14:03:09.081389Z","shell.execute_reply.started":"2023-10-29T14:03:08.918928Z","shell.execute_reply":"2023-10-29T14:03:09.079960Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"final_data.Label.value_counts()","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:03:13.254300Z","iopub.execute_input":"2023-10-29T14:03:13.254706Z","iopub.status.idle":"2023-10-29T14:03:13.264846Z","shell.execute_reply.started":"2023-10-29T14:03:13.254675Z","shell.execute_reply":"2023-10-29T14:03:13.263871Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"final_data.columns","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:03:20.862265Z","iopub.execute_input":"2023-10-29T14:03:20.862731Z","iopub.status.idle":"2023-10-29T14:03:20.872602Z","shell.execute_reply.started":"2023-10-29T14:03:20.862699Z","shell.execute_reply":"2023-10-29T14:03:20.870931Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"FEATURES = ['Open_lag1', 'Open_lag2','Open',\n       'Close_lag1', 'Close_lag2', 'Close_lag3','intraday_return_lag1',\n       'intraday_return_lag2', 'intraday_return_lag3', 'intraday_return_lag4',\n       'intraday_return_lag5', 'intraday_return_lag6', 'intraday_return_lag7',\n       'intraday_return_lag8', 'intraday_return_lag9', 'intraday_return_lag10',\n       'volatility_dummy_lag1', 'volatility_dummy_lag2',\n       'volatility_dummy_lag3', 'volatility_dummy_lag4',\n       'volatility_dummy_lag5', 'volatility_dummy_lag6',\n       'volatility_dummy_lag7', 'volatility_dummy_lag8',\n       'volatility_dummy_lag9', 'volatility_dummy_lag10', 'vol_dummy_lag1',\n       'vol_dummy_lag2', 'vol_dummy_lag3', 'vol_dummy_lag4', 'vol_dummy_lag5',\n       'vol_dummy_lag6', '4_EMA_dummy_lag1', '4_EMA_dummy_lag2',\n       '5_EMA_dummy_lag1', '5_EMA_dummy_lag2', '9_EMA_dummy_lag1',\n       '9_EMA_dummy_lag2', '15_EMA_dummy_lag1', '15_EMA_dummy_lag2',\n       'chng_jpdf_dummy_lag1', 'umap1_lag1', 'umap1_lag2', 'umap2_lag1',\n       'umap2_lag2']\n\nTARGET = ['intraday_dummy']","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:03:21.690873Z","iopub.execute_input":"2023-10-29T14:03:21.691678Z","iopub.status.idle":"2023-10-29T14:03:21.699912Z","shell.execute_reply.started":"2023-10-29T14:03:21.691633Z","shell.execute_reply":"2023-10-29T14:03:21.699090Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import f1_score\nfrom imblearn.metrics import geometric_mean_score\nfrom sklearn.metrics import accuracy_score as score\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn.metrics import roc_auc_score as ras\nimport optuna\nimport xgboost as xgb","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:03:23.611572Z","iopub.execute_input":"2023-10-29T14:03:23.612327Z","iopub.status.idle":"2023-10-29T14:03:25.379375Z","shell.execute_reply.started":"2023-10-29T14:03:23.612282Z","shell.execute_reply":"2023-10-29T14:03:25.377956Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_data = final_data[FEATURES]\nmodel_data","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:03:25.381422Z","iopub.execute_input":"2023-10-29T14:03:25.382227Z","iopub.status.idle":"2023-10-29T14:03:25.493475Z","shell.execute_reply.started":"2023-10-29T14:03:25.382193Z","shell.execute_reply":"2023-10-29T14:03:25.491891Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"final_data.intraday_dummy.value_counts()","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:03:31.125579Z","iopub.execute_input":"2023-10-29T14:03:31.126149Z","iopub.status.idle":"2023-10-29T14:03:31.138754Z","shell.execute_reply.started":"2023-10-29T14:03:31.126087Z","shell.execute_reply":"2023-10-29T14:03:31.137710Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_set = final_data[0:5000]\nvalidation_set = final_data[5000:]","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:03:34.049158Z","iopub.execute_input":"2023-10-29T14:03:34.049585Z","iopub.status.idle":"2023-10-29T14:03:34.056968Z","shell.execute_reply.started":"2023-10-29T14:03:34.049552Z","shell.execute_reply":"2023-10-29T14:03:34.055459Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.utils import resample","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:10:14.493768Z","iopub.execute_input":"2023-10-29T14:10:14.494264Z","iopub.status.idle":"2023-10-29T14:10:14.499920Z","shell.execute_reply.started":"2023-10-29T14:10:14.494230Z","shell.execute_reply":"2023-10-29T14:10:14.498644Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# # separate minority and majority classes\n# consolidation = model_set[model_set['intraday_dummy'] ==0]\n# bearish_bullish = model_set[model_set['intraday_dummy'] != 0]\n\n# # upsample minority\n# bearish_bullish_upsampled = resample(bearish_bullish,\n#                           replace=True, # sample with replacement\n#                           n_samples=len(consolidation), # match number in majority class\n#                           random_state=27) # reproducible results\n\n# # combine majority and upsampled minority\n# upsampled = pd.concat([model_set, bearish_bullish_upsampled])\n\n# # check new class counts\n# upsampled.intraday_dummy.value_counts()","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:10:14.733629Z","iopub.execute_input":"2023-10-29T14:10:14.734471Z","iopub.status.idle":"2023-10-29T14:10:14.741387Z","shell.execute_reply.started":"2023-10-29T14:10:14.734422Z","shell.execute_reply":"2023-10-29T14:10:14.739849Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"upsampled = model_set.sample(frac=1.0)\nupsampled","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:10:17.370387Z","iopub.execute_input":"2023-10-29T14:10:17.370847Z","iopub.status.idle":"2023-10-29T14:10:17.512037Z","shell.execute_reply.started":"2023-10-29T14:10:17.370815Z","shell.execute_reply":"2023-10-29T14:10:17.510603Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"upper_limit = 0\nlimit = 4200","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:10:19.954528Z","iopub.execute_input":"2023-10-29T14:10:19.955029Z","iopub.status.idle":"2023-10-29T14:10:19.961236Z","shell.execute_reply.started":"2023-10-29T14:10:19.954996Z","shell.execute_reply":"2023-10-29T14:10:19.959912Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train = round(upsampled[FEATURES][upper_limit:limit].fillna(value=upsampled[FEATURES][upper_limit:limit].mean()),2)\ny_train = round(upsampled[TARGET][upper_limit:limit].fillna(value=0),2)\n\nX_test = round(upsampled[FEATURES][limit:].fillna(value=upsampled[FEATURES][limit:].mean()),2)\ny_test = round(upsampled[TARGET][limit:].fillna(value=0),2)","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:10:20.158696Z","iopub.execute_input":"2023-10-29T14:10:20.159253Z","iopub.status.idle":"2023-10-29T14:10:20.254795Z","shell.execute_reply.started":"2023-10-29T14:10:20.159213Z","shell.execute_reply":"2023-10-29T14:10:20.253485Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def objective(trial):\n    param = {\n\n        'lambda': trial.suggest_uniform('lambda',0.001,0.1),\n        'alpha': trial.suggest_uniform('alpha',0.1,0.1),\n        'colsample_bytree': trial.suggest_uniform('colsample_bytree', 0.3,1.0),\n        'subsample': trial.suggest_uniform('subsample', 0.4,0.8),\n        'learning_rate': trial.suggest_uniform('learning_rate', 0.0001,0.1),\n        'n_estimators': trial.suggest_int('n_estimators', 1000,4000),\n        'max_depth': trial.suggest_int('max_depth',1,10),\n        'random_state': trial.suggest_int('random_state', 400,1000),\n        'min_child_weight': trial.suggest_int('min_child_weight', 10,100),\n        'objective': trial.suggest_categorical('objective',['binary:logistic']), \n        #'tree_method': trial.suggest_categorical('tree_method',['gpu_hist']),  # 'gpu_hist','hist'       \n        'use_label_encoder': trial.suggest_categorical('use_label_encoder',[False])\n    }\n    model = xgb.XGBClassifier(**param)      \n    model.fit(X_train,y_train,eval_set=[(X_test,y_test)],early_stopping_rounds=100,verbose=False)\n    preds = model.predict_proba(X_test)[:,1]\n    roc_auc = ras(y_test, preds)\n    \n    return roc_auc\n","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:11:41.576210Z","iopub.execute_input":"2023-10-29T14:11:41.576733Z","iopub.status.idle":"2023-10-29T14:11:41.587975Z","shell.execute_reply.started":"2023-10-29T14:11:41.576700Z","shell.execute_reply":"2023-10-29T14:11:41.586930Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# def objective(trial):\n#     \"\"\"Define the objective function\"\"\"\n\n#     params = {\n#         'max_depth': trial.suggest_int('max_depth', 1, 20),\n#         'learning_rate': trial.suggest_loguniform('learning_rate', 0.001, 1.0),\n#         'n_estimators': trial.suggest_int('n_estimators', 50, 5000),\n#         'min_child_weight': trial.suggest_int('min_child_weight', 1e-10, 10),\n#         'gamma': trial.suggest_loguniform('gamma', 1e-8, 1.0),\n#         'subsample': trial.suggest_loguniform('subsample', 0.01, 1.0),\n#         'colsample_bytree': trial.suggest_loguniform('colsample_bytree', 0.01, 1.0),\n#         'reg_alpha': trial.suggest_loguniform('reg_alpha', 1e-10, 1.0),\n#         'reg_lambda': trial.suggest_loguniform('reg_lambda', 1e-10, 1.0),\n#         'eval_metric': 'logloss',\n#         'use_label_encoder': False,\n#         'objective':\"binary:logistic\"\n        \n#     }\n\n#     # Fit the model\n#     optuna_model = xgb.XGBClassifier(**params)\n    \n    \n#     optuna_model.fit(X_train, y_train)\n\n#     # Make predictions\n#     y_pred = optuna_model.predict_proba(X_test)\n    \n\n#     # Evaluate predictions\n#     #f1 = f1_score(y_test, y_pred, average='weighted')\n#     #g_mean = geometric_mean_score(y_test, y_pred, average='multiclass')\n#     accuracy = score(y_test,y_pred)\n#     return accuracy","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:11:44.012683Z","iopub.execute_input":"2023-10-29T14:11:44.013198Z","iopub.status.idle":"2023-10-29T14:11:44.021478Z","shell.execute_reply.started":"2023-10-29T14:11:44.013161Z","shell.execute_reply":"2023-10-29T14:11:44.020145Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.filterwarnings(\"ignore\")","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:11:44.911455Z","iopub.execute_input":"2023-10-29T14:11:44.911923Z","iopub.status.idle":"2023-10-29T14:11:44.918050Z","shell.execute_reply.started":"2023-10-29T14:11:44.911891Z","shell.execute_reply":"2023-10-29T14:11:44.916606Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"study = optuna.create_study(direction='maximize')\nstudy.optimize(objective, n_trials=300)","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2023-10-29T14:11:47.659506Z","iopub.execute_input":"2023-10-29T14:11:47.659975Z","iopub.status.idle":"2023-10-29T14:19:18.722104Z","shell.execute_reply.started":"2023-10-29T14:11:47.659934Z","shell.execute_reply":"2023-10-29T14:19:18.720826Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('Number of finished trials: {}'.format(len(study.trials)))\nprint('Best trial:')\ntrial = study.best_trial\n\nprint('  Value: {}'.format(trial.value))\nprint('  Params: ')\n\nfor key, value in trial.params.items():\n    print('    {}: {}'.format(key, value))","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:34:22.392408Z","iopub.execute_input":"2023-10-29T14:34:22.392870Z","iopub.status.idle":"2023-10-29T14:34:22.504846Z","shell.execute_reply.started":"2023-10-29T14:34:22.392840Z","shell.execute_reply":"2023-10-29T14:34:22.503535Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# model = xgb.XGBClassifier(max_depth = 19,\n#     learning_rate = 0.7101325621603596,\n#     n_estimators = 2912,\n#     min_child_weight = 0,\n#     gamma = 0.0006385116777292907,\n#     subsample = 0.9986801171590572,\n#     colsample_bytree = 0.7045945435365544,\n#     reg_alpha = 2.9495511306979186e-10,\n#     reg_lambda = 1.823043505861188e-08)\n\n# model.fit(X_train, y_train)\n# y_pred = model.predict(X_test)\n# #f1 = f1_score(y_test, y_pred)\n# g_mean = geometric_mean_score(y_test, y_pred, average='multiclass')\n# #print(\"F1 score: \",round((f1),2))\n# print(\"G-MEAN : \", g_mean)","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:34:25.316465Z","iopub.execute_input":"2023-10-29T14:34:25.316942Z","iopub.status.idle":"2023-10-29T14:34:25.323124Z","shell.execute_reply.started":"2023-10-29T14:34:25.316908Z","shell.execute_reply":"2023-10-29T14:34:25.321869Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"params = trial.params\nmodel = xgb.XGBClassifier(**params)\nmodel.fit(X_train, y_train)\ny_pred = model.predict_proba(X_test)[:,1]\n#f1 = f1_score(y_test, y_pred)\n#g_mean = geometric_mean_score(y_test, y_pred, average='multiclass')\n#rmse = np.sqrt(mse(y_test,y_pred))\n#print(\"F1 score: \",round((f1),2))\nprint(\"ROC - AUC score :\", ras(y_test,y_pred))\n#print(\"G-MEAN : \", g_mean)\n#print(\"Root Mean Squared Error is  :\", rmse)","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:34:30.973763Z","iopub.execute_input":"2023-10-29T14:34:30.974230Z","iopub.status.idle":"2023-10-29T14:34:55.791351Z","shell.execute_reply.started":"2023-10-29T14:34:30.974195Z","shell.execute_reply":"2023-10-29T14:34:55.790145Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Y_pred = model.predict_proba(X_test)","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:40:40.678680Z","iopub.execute_input":"2023-10-29T14:40:40.679755Z","iopub.status.idle":"2023-10-29T14:40:40.753959Z","shell.execute_reply.started":"2023-10-29T14:40:40.679707Z","shell.execute_reply":"2023-10-29T14:40:40.752728Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Y_pred","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:40:41.772511Z","iopub.execute_input":"2023-10-29T14:40:41.773047Z","iopub.status.idle":"2023-10-29T14:40:41.781873Z","shell.execute_reply.started":"2023-10-29T14:40:41.773010Z","shell.execute_reply":"2023-10-29T14:40:41.780949Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"final = []\nfinal_label = []\n\nfor index in range(len(Y_pred)):\n    if Y_pred[index][0] >= 0.95:\n        final.append(int(0))\n        final_label.append('Bearish')\n    elif Y_pred[index][1] >= 0.95:\n        final.append(int(1))\n        final_label.append('Bullish')\n    else:\n        final.append(int(-1))\n        final_label.append('UNDECISIVE')\n        ","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:50:11.239781Z","iopub.execute_input":"2023-10-29T14:50:11.240272Z","iopub.status.idle":"2023-10-29T14:50:11.254851Z","shell.execute_reply.started":"2023-10-29T14:50:11.240237Z","shell.execute_reply":"2023-10-29T14:50:11.253805Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prediction_dataframe = pd.DataFrame({'Pred':final})\nprediction_dataframe['True'] = y_test.values","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:52:06.143955Z","iopub.execute_input":"2023-10-29T14:52:06.145383Z","iopub.status.idle":"2023-10-29T14:52:06.153248Z","shell.execute_reply.started":"2023-10-29T14:52:06.145339Z","shell.execute_reply":"2023-10-29T14:52:06.151885Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prediction_dataframe","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:52:09.543895Z","iopub.execute_input":"2023-10-29T14:52:09.544342Z","iopub.status.idle":"2023-10-29T14:52:09.560189Z","shell.execute_reply.started":"2023-10-29T14:52:09.544309Z","shell.execute_reply":"2023-10-29T14:52:09.558944Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for index in range(prediction_dataframe.shape[0]):\n    if prediction_dataframe['Pred'][index] == -1:\n        prediction_dataframe.drop([index],axis=0,inplace=True)","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:52:21.789026Z","iopub.execute_input":"2023-10-29T14:52:21.789502Z","iopub.status.idle":"2023-10-29T14:52:22.130236Z","shell.execute_reply.started":"2023-10-29T14:52:21.789470Z","shell.execute_reply":"2023-10-29T14:52:22.128865Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prediction_dataframe = prediction_dataframe.reset_index()\nprediction_dataframe","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:52:22.132120Z","iopub.execute_input":"2023-10-29T14:52:22.132531Z","iopub.status.idle":"2023-10-29T14:52:22.149535Z","shell.execute_reply.started":"2023-10-29T14:52:22.132499Z","shell.execute_reply":"2023-10-29T14:52:22.148211Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# feature_important = model.get_booster().get_score(importance_type='weight')\n# keys = list(feature_important.keys())\n# values = list(feature_important.values())\n\n# data = pd.DataFrame(data=values, index=keys, columns=[\"score\"]).sort_values(by = \"score\", ascending=False)\n# data.nlargest(50, columns=\"score\").plot(kind='barh', figsize = (20,10)) ## plot top 40 features","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:52:25.809837Z","iopub.execute_input":"2023-10-29T14:52:25.810317Z","iopub.status.idle":"2023-10-29T14:52:25.818386Z","shell.execute_reply.started":"2023-10-29T14:52:25.810281Z","shell.execute_reply":"2023-10-29T14:52:25.817316Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\ncm = confusion_matrix(prediction_dataframe['Pred'],prediction_dataframe['True'])\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[0,1])\ndisp.plot()","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:52:36.648336Z","iopub.execute_input":"2023-10-29T14:52:36.648751Z","iopub.status.idle":"2023-10-29T14:52:37.027763Z","shell.execute_reply.started":"2023-10-29T14:52:36.648720Z","shell.execute_reply":"2023-10-29T14:52:37.026546Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **VALIDATING IF THIS MODEL PERFORMS GOOD ON OUR VALIDATION SET WHICH DOESNOT HAVE DUPLICATES**","metadata":{}},{"cell_type":"code","source":"validation_set","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:52:55.048585Z","iopub.execute_input":"2023-10-29T14:52:55.049181Z","iopub.status.idle":"2023-10-29T14:52:55.190543Z","shell.execute_reply.started":"2023-10-29T14:52:55.049112Z","shell.execute_reply":"2023-10-29T14:52:55.189075Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"FEATURES = ['Open_lag1', 'Open_lag2','Open',\n       'Close_lag1', 'Close_lag2', 'Close_lag3','intraday_return_lag1',\n       'intraday_return_lag2', 'intraday_return_lag3', 'intraday_return_lag4',\n       'intraday_return_lag5', 'intraday_return_lag6', 'intraday_return_lag7',\n       'intraday_return_lag8', 'intraday_return_lag9', 'intraday_return_lag10',\n       'volatility_dummy_lag1', 'volatility_dummy_lag2',\n       'volatility_dummy_lag3', 'volatility_dummy_lag4',\n       'volatility_dummy_lag5', 'volatility_dummy_lag6',\n       'volatility_dummy_lag7', 'volatility_dummy_lag8',\n       'volatility_dummy_lag9', 'volatility_dummy_lag10', 'vol_dummy_lag1',\n       'vol_dummy_lag2', 'vol_dummy_lag3', 'vol_dummy_lag4', 'vol_dummy_lag5',\n       'vol_dummy_lag6', '4_EMA_dummy_lag1', '4_EMA_dummy_lag2',\n       '5_EMA_dummy_lag1', '5_EMA_dummy_lag2', '9_EMA_dummy_lag1',\n       '9_EMA_dummy_lag2', '15_EMA_dummy_lag1', '15_EMA_dummy_lag2',\n       'chng_jpdf_dummy_lag1', 'umap1_lag1', 'umap1_lag2', 'umap2_lag1',\n       'umap2_lag2']\n\nTARGET = ['intraday_dummy']","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:52:57.623314Z","iopub.execute_input":"2023-10-29T14:52:57.623717Z","iopub.status.idle":"2023-10-29T14:52:57.631873Z","shell.execute_reply.started":"2023-10-29T14:52:57.623687Z","shell.execute_reply":"2023-10-29T14:52:57.630549Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"val_data = validation_set[FEATURES]","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:52:57.840367Z","iopub.execute_input":"2023-10-29T14:52:57.840775Z","iopub.status.idle":"2023-10-29T14:52:57.848417Z","shell.execute_reply.started":"2023-10-29T14:52:57.840747Z","shell.execute_reply":"2023-10-29T14:52:57.847407Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_test = validation_set[TARGET]","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:52:59.321230Z","iopub.execute_input":"2023-10-29T14:52:59.322545Z","iopub.status.idle":"2023-10-29T14:52:59.330235Z","shell.execute_reply.started":"2023-10-29T14:52:59.322492Z","shell.execute_reply":"2023-10-29T14:52:59.328841Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_test","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:52:59.526309Z","iopub.execute_input":"2023-10-29T14:52:59.526745Z","iopub.status.idle":"2023-10-29T14:52:59.540730Z","shell.execute_reply.started":"2023-10-29T14:52:59.526712Z","shell.execute_reply":"2023-10-29T14:52:59.539437Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"val_data = validation_set[FEATURES]\ny_test = validation_set[TARGET]\nval_pred = model.predict_proba(val_data)\n#g_mean = geometric_mean_score(y_test, val_pred, average='multiclass')\n#ACCURACY = ras(y_test,val_pred)\n#print(\"G-MEAN : \", g_mean)\n#print(\"ROC-AUC score :\", ACCURACY)","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:53:01.988848Z","iopub.execute_input":"2023-10-29T14:53:01.989358Z","iopub.status.idle":"2023-10-29T14:53:02.026564Z","shell.execute_reply.started":"2023-10-29T14:53:01.989322Z","shell.execute_reply":"2023-10-29T14:53:02.025577Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"final = []\nfinal_label = []\n\nfor index in range(len(val_pred)):\n    if val_pred[index][0] >= 0.95:\n        final.append(int(0))\n        final_label.append('Bearish')\n    elif val_pred[index][1] >= 0.95:\n        final.append(int(1))\n        final_label.append('Bullish')\n    else:\n        final.append(int(-1))\n        final_label.append('UNDECISIVE')\n        ","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2023-10-29T14:53:02.179679Z","iopub.execute_input":"2023-10-29T14:53:02.180197Z","iopub.status.idle":"2023-10-29T14:53:02.191488Z","shell.execute_reply.started":"2023-10-29T14:53:02.180159Z","shell.execute_reply":"2023-10-29T14:53:02.190182Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prediction_dataframe = pd.DataFrame({'Pred':final})\nprediction_dataframe['True'] = y_test.values\n\nfor index in range(prediction_dataframe.shape[0]):\n    if prediction_dataframe['Pred'][index] == -1:\n        prediction_dataframe.drop([index],axis=0,inplace=True)\n        \nprediction_dataframe = prediction_dataframe.reset_index()","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:53:04.534294Z","iopub.execute_input":"2023-10-29T14:53:04.534759Z","iopub.status.idle":"2023-10-29T14:53:04.677889Z","shell.execute_reply.started":"2023-10-29T14:53:04.534727Z","shell.execute_reply":"2023-10-29T14:53:04.676623Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prediction_dataframe","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:53:05.784212Z","iopub.execute_input":"2023-10-29T14:53:05.784626Z","iopub.status.idle":"2023-10-29T14:53:05.797441Z","shell.execute_reply.started":"2023-10-29T14:53:05.784597Z","shell.execute_reply":"2023-10-29T14:53:05.796514Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cm = confusion_matrix(prediction_dataframe['Pred'],prediction_dataframe['True'])\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[0,1])\ndisp.plot()","metadata":{"execution":{"iopub.status.busy":"2023-10-29T14:53:08.218668Z","iopub.execute_input":"2023-10-29T14:53:08.219168Z","iopub.status.idle":"2023-10-29T14:53:08.566104Z","shell.execute_reply.started":"2023-10-29T14:53:08.219118Z","shell.execute_reply":"2023-10-29T14:53:08.564559Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}