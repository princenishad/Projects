{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3385921,"sourceType":"datasetVersion","datasetId":2041219}],"dockerImageVersionId":30213,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2022-08-09T07:21:01.736646Z","iopub.execute_input":"2022-08-09T07:21:01.737043Z","iopub.status.idle":"2022-08-09T07:21:01.749360Z","shell.execute_reply.started":"2022-08-09T07:21:01.737003Z","shell.execute_reply":"2022-08-09T07:21:01.748255Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"/kaggle/input/flu-shot-learning/training_set_features.csv\n/kaggle/input/flu-shot-learning/test_set_features.csv\n/kaggle/input/flu-shot-learning/training_set_labels.csv\n/kaggle/input/flu-shot-learning/submission_format.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"train = pd.read_csv(\"/kaggle/input/flu-shot-learning/training_set_features.csv\")\ntest = pd.read_csv(\"/kaggle/input/flu-shot-learning/test_set_features.csv\")\nlabel = pd.read_csv(\"/kaggle/input/flu-shot-learning/training_set_labels.csv\")","metadata":{"execution":{"iopub.status.busy":"2022-08-09T07:21:02.552631Z","iopub.execute_input":"2022-08-09T07:21:02.553774Z","iopub.status.idle":"2022-08-09T07:21:02.748943Z","shell.execute_reply.started":"2022-08-09T07:21:02.553732Z","shell.execute_reply":"2022-08-09T07:21:02.747726Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"for features in train.columns:\n    train[features].fillna(value='NaN')\n    test[features].fillna(value='NaN')","metadata":{"execution":{"iopub.status.busy":"2022-08-09T07:21:03.226145Z","iopub.execute_input":"2022-08-09T07:21:03.226585Z","iopub.status.idle":"2022-08-09T07:21:03.374039Z","shell.execute_reply.started":"2022-08-09T07:21:03.226547Z","shell.execute_reply":"2022-08-09T07:21:03.372961Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"categorical_columns = train.select_dtypes('object').columns","metadata":{"execution":{"iopub.status.busy":"2022-08-09T07:21:04.161726Z","iopub.execute_input":"2022-08-09T07:21:04.162109Z","iopub.status.idle":"2022-08-09T07:21:04.172259Z","shell.execute_reply.started":"2022-08-09T07:21:04.162078Z","shell.execute_reply":"2022-08-09T07:21:04.170895Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"train = pd.get_dummies(data=train, columns = categorical_columns)\ntest = pd.get_dummies(data=test, columns = categorical_columns)","metadata":{"execution":{"iopub.status.busy":"2022-08-09T07:21:04.639316Z","iopub.execute_input":"2022-08-09T07:21:04.640128Z","iopub.status.idle":"2022-08-09T07:21:04.756764Z","shell.execute_reply.started":"2022-08-09T07:21:04.640055Z","shell.execute_reply":"2022-08-09T07:21:04.755736Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"X = np.array(train)\ny = np.array(label['h1n1_vaccine'])","metadata":{"execution":{"iopub.status.busy":"2022-08-09T07:21:05.121071Z","iopub.execute_input":"2022-08-09T07:21:05.122170Z","iopub.status.idle":"2022-08-09T07:21:05.144036Z","shell.execute_reply.started":"2022-08-09T07:21:05.122129Z","shell.execute_reply":"2022-08-09T07:21:05.142584Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"import optuna\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_curve, roc_auc_score\nimport lightgbm as lgb","metadata":{"execution":{"iopub.status.busy":"2022-08-09T07:21:05.874938Z","iopub.execute_input":"2022-08-09T07:21:05.875706Z","iopub.status.idle":"2022-08-09T07:21:05.880361Z","shell.execute_reply.started":"2022-08-09T07:21:05.875667Z","shell.execute_reply":"2022-08-09T07:21:05.879395Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"cv = StratifiedKFold(n_splits=30, shuffle=True, random_state=2000)\n\nfor idx, (train_index, test_index) in enumerate(cv.split(X, y)):\n    lgb_params = {\n        \"objective\" : \"binary\",\n        \"metric\" : \"auc\",\n        \"boosting\": 'gbdt',\n        'n_estimators' : 100000,\n        'max_depth': -1,\n        'lambda_l1': 5.090811136404964,\n        'lambda_l2': 1.7166703748587147e-08,\n        'feature_fraction': 0.7008525278629246,\n        'bagging_fraction': 0.9821333268690843\n    }\n\n    x_train, x_val, y_train, y_val= X[train_index], X[test_index], y[train_index], y[test_index]\n\n    train_data = lgb.Dataset(x_train, label=y_train)\n    val_data   = lgb.Dataset(x_val, label=y_val)\n\n    lgb_clf = lgb.train(lgb_params,\n                        train_data,\n                        valid_sets = [val_data],\n                        early_stopping_rounds=1000,\n                        verbose_eval = 1000)\n\n    #y_pred = lgb_clf.predict(x_val)\n    #score = roc_auc_score(y_pred, y_val)\n    lgb_clf.save_model(f'/kaggle/working/model{idx}.txt')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"models = []\nroc_score = []\nfor i in range(30):\n    model = lgb.Booster(model_file=f'/kaggle/working/model{i}.txt')\n\n    y_pred = model.predict(X)\n    #y_pred = preds[:,1].reshape(-1,1)\n    score = roc_auc_score(y, y_pred)\n    roc_score.append(score)\n    print(\"AUC-ROC score is\", score)\n    models.append(model)","metadata":{"execution":{"iopub.status.busy":"2022-08-09T07:26:08.614436Z","iopub.execute_input":"2022-08-09T07:26:08.614880Z","iopub.status.idle":"2022-08-09T07:26:11.911924Z","shell.execute_reply.started":"2022-08-09T07:26:08.614846Z","shell.execute_reply":"2022-08-09T07:26:11.910682Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stdout","text":"AUC-ROC score is 0.8995316975166052\nAUC-ROC score is 0.9022962489363066\nAUC-ROC score is 0.9001458020689946\nAUC-ROC score is 0.8960411187944568\nAUC-ROC score is 0.9107991435182148\nAUC-ROC score is 0.8723198682648199\nAUC-ROC score is 0.9173819726126197\nAUC-ROC score is 0.9138042320692457\nAUC-ROC score is 0.8917775172810756\nAUC-ROC score is 0.8944418057925022\nAUC-ROC score is 0.9044950361753399\nAUC-ROC score is 0.889742307189999\nAUC-ROC score is 0.9131510546873645\nAUC-ROC score is 0.9056500769449005\nAUC-ROC score is 0.9109109489576117\nAUC-ROC score is 0.8930668829473051\nAUC-ROC score is 0.8800504439194625\nAUC-ROC score is 0.9074984404804501\nAUC-ROC score is 0.891398524241938\nAUC-ROC score is 0.9187784471021342\nAUC-ROC score is 0.8850082689771235\nAUC-ROC score is 0.9110131851987934\nAUC-ROC score is 0.9154984745340593\nAUC-ROC score is 0.8934825858440455\nAUC-ROC score is 0.9016965903539028\nAUC-ROC score is 0.9080291371527708\nAUC-ROC score is 0.8893287954888219\nAUC-ROC score is 0.8997271370780606\nAUC-ROC score is 0.9035210979285769\nAUC-ROC score is 0.9173727637257203\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\"Mean score is \",sum(roc_score)/30) \nprint(\"Maximium score is\",max(roc_score))","metadata":{"execution":{"iopub.status.busy":"2022-08-09T07:26:16.703442Z","iopub.execute_input":"2022-08-09T07:26:16.704729Z","iopub.status.idle":"2022-08-09T07:26:16.711436Z","shell.execute_reply.started":"2022-08-09T07:26:16.704674Z","shell.execute_reply":"2022-08-09T07:26:16.710253Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"Mean score is  0.901265320192774\nMaximium score is 0.9187784471021342\n","output_type":"stream"}]},{"cell_type":"code","source":"def threshold_arr(array):\n    # Get major confidence-scored predicted value.\n    new_arr = []\n    for ix, val in enumerate(array):\n        loc = np.array(val).argmax(axis=0)\n        k = list(np.zeros((len(val))))\n        k[loc]=1\n        new_arr.append(k)\n        \n    return np.array(new_arr)","metadata":{"execution":{"iopub.status.busy":"2022-08-09T07:26:24.238425Z","iopub.execute_input":"2022-08-09T07:26:24.238880Z","iopub.status.idle":"2022-08-09T07:26:24.246030Z","shell.execute_reply.started":"2022-08-09T07:26:24.238845Z","shell.execute_reply":"2022-08-09T07:26:24.244627Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"def ensemble(models, x):\n    # Ensemble K-Fold CV models with adding all confidence score by class.\n    y_preds = []\n    \n    for model in models:\n        y_pred = model.predict(x)\n        y_preds.append(y_pred)\n        \n    init_y_pred = y_preds[0]\n    for ypred in y_preds[1:]:\n        init_y_pred += ypred\n        \n    y_pred = init_y_pred\n    \n    return y_pred","metadata":{"execution":{"iopub.status.busy":"2022-08-09T07:26:25.100033Z","iopub.execute_input":"2022-08-09T07:26:25.100447Z","iopub.status.idle":"2022-08-09T07:26:25.106774Z","shell.execute_reply.started":"2022-08-09T07:26:25.100413Z","shell.execute_reply":"2022-08-09T07:26:25.105292Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"x = np.array(test)\n\ny_pred_h1n1 = ensemble(models, x)","metadata":{"execution":{"iopub.status.busy":"2022-08-09T07:26:26.033002Z","iopub.execute_input":"2022-08-09T07:26:26.035466Z","iopub.status.idle":"2022-08-09T07:26:28.850979Z","shell.execute_reply.started":"2022-08-09T07:26:26.035422Z","shell.execute_reply":"2022-08-09T07:26:28.850013Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"markdown","source":"for seasonal label","metadata":{}},{"cell_type":"code","source":"X = np.array(train)\ny_new = np.array(label['seasonal_vaccine'])","metadata":{"execution":{"iopub.status.busy":"2022-08-09T07:26:29.518239Z","iopub.execute_input":"2022-08-09T07:26:29.519063Z","iopub.status.idle":"2022-08-09T07:26:29.539651Z","shell.execute_reply.started":"2022-08-09T07:26:29.519016Z","shell.execute_reply":"2022-08-09T07:26:29.538575Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"cv = StratifiedKFold(n_splits=25, shuffle=True, random_state=1000)\n\nfor idx, (train_index, test_index) in enumerate(cv.split(X, y_new)):\n    lgb_params = {\n        \"objective\" : \"binary\",\n        \"metric\" : \"auc\",\n        #\"boosting\": 'gbdt',\n        'n_estimators': 100000,\n         'lambda_l1': 0.0039688365207484096,\n        'lambda_l2': 0.0005160845334458607,\n        'feature_fraction': 0.4063067319534188,\n        'bagging_fraction': 0.5247644825821444,\n        'bagging_freq': 3\n        }\n\n    x_train, x_val, y_train, y_val= X[train_index], X[test_index], y_new[train_index], y_new[test_index]\n\n    train_data = lgb.Dataset(x_train, label=y_train)\n    val_data   = lgb.Dataset(x_val, label=y_val)\n\n    lgb_clf = lgb.train(lgb_params,\n                        train_data,\n                        valid_sets = [val_data],\n                        early_stopping_rounds=2000,\n                        verbose_eval = 1000)\n\n    #y_pred = lgb_clf.predict(x_val)\n    #score = roc_auc_score(y_pred, y_val)\n    lgb_clf.save_model(f'/kaggle/working/model_seasonal{idx}.txt')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"models_2 = []\nroc_score_2 = []\nfor i in range(25):\n    model = lgb.Booster(model_file=f'/kaggle/working/model_seasonal{i}.txt')\n\n    y_pred = model.predict(X)\n    #y_pred = preds[:,1].reshape(-1,1)\n    score = roc_auc_score(y_new, y_pred)\n    roc_score_2.append(score)\n    print(\"AUC-ROC score is\", score)\n    models_2.append(model)","metadata":{"execution":{"iopub.status.busy":"2022-08-09T07:31:59.981348Z","iopub.execute_input":"2022-08-09T07:31:59.981844Z","iopub.status.idle":"2022-08-09T07:32:03.028697Z","shell.execute_reply.started":"2022-08-09T07:31:59.981809Z","shell.execute_reply":"2022-08-09T07:32:03.027576Z"},"trusted":true},"execution_count":38,"outputs":[{"name":"stdout","text":"AUC-ROC score is 0.8789437248580512\nAUC-ROC score is 0.8892870054327345\nAUC-ROC score is 0.8883438442682217\nAUC-ROC score is 0.8979499225569374\nAUC-ROC score is 0.8978392686814485\nAUC-ROC score is 0.89353319999423\nAUC-ROC score is 0.9076760759086262\nAUC-ROC score is 0.8795054406230784\nAUC-ROC score is 0.8852600450594211\nAUC-ROC score is 0.8969781653837625\nAUC-ROC score is 0.8910416114467878\nAUC-ROC score is 0.9074422591646967\nAUC-ROC score is 0.8788580438910135\nAUC-ROC score is 0.8888764118257992\nAUC-ROC score is 0.8884350866659093\nAUC-ROC score is 0.8788792246588087\nAUC-ROC score is 0.9134652998281647\nAUC-ROC score is 0.8987947528944231\nAUC-ROC score is 0.8787869905571755\nAUC-ROC score is 0.9106122915393228\nAUC-ROC score is 0.899412347795983\nAUC-ROC score is 0.8913464420817849\nAUC-ROC score is 0.8782367864464724\nAUC-ROC score is 0.8829179446124331\nAUC-ROC score is 0.9072877900057879\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\"Mean score is\",sum(roc_score_2)/25)\nprint(\"Maximum score is\",max(roc_score_2))","metadata":{"execution":{"iopub.status.busy":"2022-08-09T07:32:09.602026Z","iopub.execute_input":"2022-08-09T07:32:09.602453Z","iopub.status.idle":"2022-08-09T07:32:09.608789Z","shell.execute_reply.started":"2022-08-09T07:32:09.602417Z","shell.execute_reply":"2022-08-09T07:32:09.607559Z"},"trusted":true},"execution_count":39,"outputs":[{"name":"stdout","text":"Mean score is 0.8923883990472429\nMaximum score is 0.9134652998281647\n","output_type":"stream"}]},{"cell_type":"code","source":"x = np.array(test)\n\ny_pred_seasonal = ensemble(models_2, x)","metadata":{"execution":{"iopub.status.busy":"2022-08-09T07:32:15.028943Z","iopub.execute_input":"2022-08-09T07:32:15.029369Z","iopub.status.idle":"2022-08-09T07:32:17.049489Z","shell.execute_reply.started":"2022-08-09T07:32:15.029335Z","shell.execute_reply":"2022-08-09T07:32:17.048514Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"submission = pd.read_csv(\"/kaggle/input/flu-shot-learning/submission_format.csv\", index_col='respondent_id')","metadata":{"execution":{"iopub.status.busy":"2022-08-09T07:32:17.051623Z","iopub.execute_input":"2022-08-09T07:32:17.052303Z","iopub.status.idle":"2022-08-09T07:32:17.085415Z","shell.execute_reply.started":"2022-08-09T07:32:17.052255Z","shell.execute_reply":"2022-08-09T07:32:17.084579Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"submission[\"h1n1_vaccine\"] = y_pred_h1n1\nsubmission[\"seasonal_vaccine\"] = y_pred_seasonal","metadata":{"execution":{"iopub.status.busy":"2022-08-09T07:32:17.087009Z","iopub.execute_input":"2022-08-09T07:32:17.087346Z","iopub.status.idle":"2022-08-09T07:32:17.093104Z","shell.execute_reply.started":"2022-08-09T07:32:17.087317Z","shell.execute_reply":"2022-08-09T07:32:17.091673Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"code","source":"submission","metadata":{"execution":{"iopub.status.busy":"2022-08-09T07:32:17.995614Z","iopub.execute_input":"2022-08-09T07:32:17.996715Z","iopub.status.idle":"2022-08-09T07:32:18.014701Z","shell.execute_reply.started":"2022-08-09T07:32:17.996670Z","shell.execute_reply":"2022-08-09T07:32:18.013474Z"},"trusted":true},"execution_count":43,"outputs":[{"execution_count":43,"output_type":"execute_result","data":{"text/plain":"               h1n1_vaccine  seasonal_vaccine\nrespondent_id                                \n26707              4.667240          5.555385\n26708              1.229221          0.899894\n26709              5.393187         17.178419\n26710             19.802235         20.714422\n26711              7.918889         12.198187\n...                     ...               ...\n53410              6.155600          9.506579\n53411              4.921225          7.400388\n53412              5.838950          4.062343\n53413              0.895229          6.918958\n53414             16.050840         14.180894\n\n[26708 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>h1n1_vaccine</th>\n      <th>seasonal_vaccine</th>\n    </tr>\n    <tr>\n      <th>respondent_id</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>26707</th>\n      <td>4.667240</td>\n      <td>5.555385</td>\n    </tr>\n    <tr>\n      <th>26708</th>\n      <td>1.229221</td>\n      <td>0.899894</td>\n    </tr>\n    <tr>\n      <th>26709</th>\n      <td>5.393187</td>\n      <td>17.178419</td>\n    </tr>\n    <tr>\n      <th>26710</th>\n      <td>19.802235</td>\n      <td>20.714422</td>\n    </tr>\n    <tr>\n      <th>26711</th>\n      <td>7.918889</td>\n      <td>12.198187</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>53410</th>\n      <td>6.155600</td>\n      <td>9.506579</td>\n    </tr>\n    <tr>\n      <th>53411</th>\n      <td>4.921225</td>\n      <td>7.400388</td>\n    </tr>\n    <tr>\n      <th>53412</th>\n      <td>5.838950</td>\n      <td>4.062343</td>\n    </tr>\n    <tr>\n      <th>53413</th>\n      <td>0.895229</td>\n      <td>6.918958</td>\n    </tr>\n    <tr>\n      <th>53414</th>\n      <td>16.050840</td>\n      <td>14.180894</td>\n    </tr>\n  </tbody>\n</table>\n<p>26708 rows × 2 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"submission.to_csv('/kaggle/working/submission14.csv', index=True)","metadata":{"execution":{"iopub.status.busy":"2022-08-09T07:32:26.130850Z","iopub.execute_input":"2022-08-09T07:32:26.131279Z","iopub.status.idle":"2022-08-09T07:32:26.240998Z","shell.execute_reply.started":"2022-08-09T07:32:26.131243Z","shell.execute_reply":"2022-08-09T07:32:26.240097Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}